@test(interface_decl)
interface spec { func f(); }

@test(multiple_interfaces)
interface spec1 { func f(); }
interface spec2 { func f(); }
interface spec3 { func f(); }

@test(duplicated_interface)
@error(ERROR_DUPLICATED_ID)
interface spec { func f(); }
interface spec { func f(); }

@test(empty_interface)
@error(ERROR_SYNTAX)
interface spec { }

@test(variable_declaration)
@error(ERROR_SYNTAX)
interface spec { int x; }

@test(interface_with_implementation)
@error(ERROR_SYNTAX)
interface spec {
    func f() { };
}

@test(undefined_interface)
@error(ERROR_UNDEFINED_ID)
interface spec {
    func f();
}
contract test implements sped { }

@test(implements_interface)
interface spec {
    func f();
}
contract test implements spec {
    func f() { }
}

@test(not_implemented_function)
@error(ERROR_NOT_IMPLEMENTED,2)
interface spec {
    func f1();
    func f2(int16 x);
    //func f3(int16 x) float;
}
contract test implements spec {
    func f2(uint16 x) { }
    //func f3(int16 x) double { return 1.0; }
}

@test(interface_as_type)
interface spec {
    func f1() int;
}
contract test {
    spec x = null;
}

@test(assignment_to_interface)
interface spec {
    public func f() byte;
}
contract test implements spec {
    public func f() byte { return 0; }
}
contract main {
    spec a = new test();
    spec b, c = new test(), new test();
}

@test(assignment_to_contract)
@error(ERROR_MISMATCHED_TYPE)
interface spec {
    public func f();
}
contract test implements spec {
    public func f() { }
}
contract main {
    func f() spec { return new test(); }
    main() {
        test a = f();
    }
}

@test(access_interface)
interface spec {
    public func f() string;
}
contract test implements spec {
    public func f() string { return "3.14"; }
}
contract main {
    main() {
        spec a = new test();
        string b = a.f();

        spec x, y = new test(), new test();
        string z = y.f();
    }
}

@test(return_interface)
interface spec {
    public func f() string;
}
contract test implements spec {
    public func f() string { return "dog"; }
}
contract main {
    func f() spec { return new test(); }
    main() {
        spec a = f();
        string s = a.f();
    }
}

@test(inaccessble_function)
@error(ERROR_UNDEFINED_ID)
interface spec {
    public func f1() uint16;
}
contract test implements spec {
    public func f1() uint16 { return 32768; }
    public func f2() string { return "aergo"; }
    //public func f2() int8, string { return 16, "aergo"; }
}
contract main {
    uint16 i;

    main() {
        string s;

        test a = new test();
        i, s = a.f1(), a.f2();

        spec b = new test();
        i, s = a.f1(), b.f2();
    }
}

@test(interface_as_parameter)
interface spec {
    func f() int;
}
contract test1 implements spec {
    func f() int { return 1; }
}
contract test2 implements spec {
    func f() int { return 2; }
}
contract main {
    func f(spec v) int { return v.f(); }
    main() {
        f(new test1());
        f(new test2());
    }
}
