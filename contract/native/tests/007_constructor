@test(empty_constructor)
contract test {
    test() { }
}

@test(constructor_with_arguments)
contract test1 {
    test1(int x) { }
}
contract test2 {
    test2(int x, map(int, string) y) { }
}

@test(missing_construtor)
@error(ERROR_SYNTAX)
contract test {
    test2() { }
}

@test(return_parameter_declaration)
@error(ERROR_SYNTAX)
contract test {
    test(int x) byte { }
}

@test(multiple_constructor)
@error(ERROR_SYNTAX)
contract test {
    test(int x) { }
    test2(int x, string y) { }
}

@test(duplicated_constructor)
@error(ERROR_DUPLICATED_ID)
contract test {
    test(int x) { }
    test(int x, string y) { }
}

@test(instantiate)
contract callee { }

contract test {
    test() {
        test t = new test();
        callee c = new callee();
    }
}

@test(missing_parenthesis)
@error(ERROR_INVALID_INITIALIZER)
contract callee { }

contract test {
    test() {
        callee c = new callee;
    }
}

@test(instantiate_with_non_constructor)
@error(ERROR_UNDEFINED_ID)
contract test {
    test() {
        test c = new f();
    }
    func f() test { return null; }
}

@test(not_allowed_initializer)
@error(ERROR_MISMATCHED_TYPE)
contract callee { int a; }

contract test {
    test() {
        callee c = new { 1 };
    }
}

@test(compare_with_instance)
contract callee { }

contract test {
    test() {
        callee c;
        if (c == null) { }
    }
}

@test(self_accessor)
contract test {
    float x;
    string y;
    test(float x, string y) {
        this.x = x;
        if (this.y == "") {
            this.y = "self";
        }
    }
}

@test(self_accessor_as_parameter)
@error(ERROR_NOT_ALLOWED_PARAM)
contract test {
    test() {
        f(this);
    }
    func f (test p) { }
}

@test(self_accessor_as_lvalue)
@error(ERROR_INVALID_LVALUE)
contract test {
    test() {
        this = new test();
    }
}

@test(self_accessor_as_return)
contract test {
    func f1() test { return this; }
}
