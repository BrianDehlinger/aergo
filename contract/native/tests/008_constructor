@test(empty_constructor)
contract test {
    test() { }
}

@test(constructor_with_arguments)
contract test1 {
    test1(int x) { }
}
contract test2 {
    test2(int x, map(int, string) y) { }
}

@test(missing_construtor)
@error(ERROR_SYNTAX)
contract test {
    test2() { }
}

@test(constructor_with_return)
@error(ERROR_SYNTAX)
contract test {
    test(int x) byte { }
}

@test(multiple_constructor)
@error(ERROR_SYNTAX)
contract test {
    test(int x) { }
    test2(int x, string y) { }
}

@test(duplicated_constructor)
@error(ERROR_DUPLICATED_ID)
contract test {
    test(int x) { }
    test(int x, string y) { }
}

@test(instantiate)
contract callee { }

contract test {
    func f() {
        callee c = new callee();
    }
}

@test(not_allowed_initializer)
@error(ERROR_NOT_ALLOWED_INIT)
contract callee { int a; }

contract test {
    test() {
        callee c = { 1 };
    }
}

@test(compare_with_instance)
contract callee { }

contract test {
    test() {
        callee c;
        if (c == null) { }
    }
}

@test(contract_accessor)
contract test {
    string v;
    test(int v) {
        if (this.v == "") { }
    }
}

@test(neighbor_reference)
contract neighbor {
    public int v;
    neighbor(int p) {
        v = p;
    }
    public func f() int {
        return v;
    }
}

contract test {
    int v;
    func f() int {
        neighbor n = new neighbor(1);
        v = n.v;
        return n.f();
    }
}

@test(missing_parenthesis)
@error(ERROR_SYNTAX)
contract callee { }

contract test {
    func f() {
        callee c = new callee;
    }
}
