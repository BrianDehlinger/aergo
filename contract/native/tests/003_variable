@test(primitive_type)
contract test {
    int v1;
    int8 v2;
    int16 v3;
    int32 v4;
    int64 v5;
    uint v6;
    uint8 v7;
    uint16 v8;
    uint32 v9;
    uint64 v10;
    float v11;
    double v12;
    bool v13;
    byte v14;
    string v15;
    int v16, v17;
}

@test(invalid_declaration)
@error(ERROR_SYNTAX)
contract test {
    int v1, string v2;
}

@test(invalid_identifier)
@error(ERROR_SYNTAX)
contract test {
    int 1v;
}

@test(constant_qualifier)
contract test {
    const int v1;
    const string v2;
}

@test(invalid_qualifier_position)
@error(ERROR_SYNTAX)
contract test {
    int const v;
}

@test(type_modifier)
contract test {
    local int v1;
    local bool v2;
}

@test(invalid_modifier_position)
@error(ERROR_SYNTAX)
contract test {
    int local v1;
}

@test(out_of_scope_identifier)
@error(ERROR_UNDEFINED_ID)
contract test {
    int i = j;
    int j = 1;
}

@test(self_reference)
contract test {
    int i = i;
}

@test(primitive_array)
contract test {
    int v1[10];
    int v2, v3[10];
    int v4[10], v5;
    int v6[10], v7[10];
    int v8[10][10];

    string v9[1 + 1];
    string v10[1 + 1 * 3];
}

@test(invalid_brace_position)
@error(ERROR_SYNTAX)
contract test {
    int[10] v;
}

@test(missing_declarator)
@error(ERROR_SYNTAX)
contract test {
    int;
}

@test(missing_semicolon)
@error(ERROR_SYNTAX)
contract test {
    int v
}

@test(struct_type)
contract test {
    struct s1 {
        int a;
        byte b;
        bool c[10];
    }
    s1 v1;

    struct s2 {
        s1 a;
        string b;
    }
}

@test(struct_array)
contract test {
    struct s {
        int a, b;
        string c;
    }
    s x[10];
    s y[10][1];
}

@test(empty_struct)
@error(ERROR_SYNTAX)
contract test {
    struct s {
    }
}

@test(struct_of_struct)
@error(ERROR_SYNTAX)
contract test {
    struct outer {
        struct inner {
            int a;
        }
    }
}

@test(map_type)
contract test {
    map(int, int) m1;
    map(int8, int8) m2;
    map(int16, int16) m3;
    map(int32, int32) m4;
    map(int64, int64) m5;
    map(uint8, uint8) m6;
    map(uint16, uint16) m7;
    map(uint32, uint32) m8;
    map(uint64, uint64) m9;
    map(float, float) m10;
    map(double, double) m11;
    map(bool, bool) m12;
    map(byte, byte) m13;
    map(string, string) m14;
    map(int, int) m15, m16;

    struct x {
        int a;
    }
    map(int, x) m17;
    map(int, map(string, string)) m18;
    map(x, x) m19;
    map(x, map(string, string)) m20;
}

@test(map_array)
contract test {
    map(int, int) m1[1];
    map(int, int) m2[1], m3[2];
    map(int, int) m4[2][2];
}

@test(invalid_key_type)
@error(ERROR_INVALID_KEY_TYPE)
contract test {
    map(map(int, int), string) m1;
}
