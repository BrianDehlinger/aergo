@test(numeric_value)
contract test {
    int i1 = 1;
    int i2 = +12;
    int i3 = -123;
    int i4 = 0x08;
    int i5 = 0xff;

    float f1 = 1.0;
    float f2 = +1.1;
    float f3 = -1.2;
    float f4 = 1e1;
    float f5 = -.2e+1;
    float f6 = 3.e-1;

    double d1 = 1.;
    double d2 = .234;
}

@test(mismatched_primitive_type)
@error(ERROR_MISMATCHED_TYPE)
contract test {
    int i = 1.0;
}

@test(string_value)
contract test {
    string v1 = "";
    string v2 = "literal";
    string v3 = "literal \"include quotation\"";
    string v4 = "literal /* with */ // comments";
}

@test(unterminated_string)
@error(ERROR_UNTERMINATED_STRING)
contract test {
    string v = "unterminated string\";
}

@test(predefined_constant)
contract test {
    bool v1 = true;
    bool v2 = false;
    map(int, string) m = null;
}

@test(array_initializer)
contract test {
    int v1[3] = { 1, 2, 3 };
    int v2[3] = { 1, 2, 3, };
    string v3[3] = { "a", "b", "c" };

    int v4[1], v5[1] = {1}, {2};
}

@test(missing_initializer)
@error(ERROR_MISSING_INITIALIZER)
contract test {
    int i[];
}

@test(struct_initializer)
contract test {
    struct s {
        int a;
        int b;
        string c;
    }
    s v1 = { 1, 0x01, "b" };
    s v2[2] = { { 1, 0x01, "a" }, { 2, 0x02, "b" } };
}

@test(map_initializer)
contract test {
    map(int, string) m1 = new map();
    map(int, string) m2 = new map(10);
}
