@test(numeric_value)
contract test {
    int i1 = 1;
    int i2 = +12;
    int i3 = -123;
    int i4 = 0x08;
    int i5 = 0xff;

    float f1 = 1.0;
    float f2 = +1.1;
    float f3 = -1.2;
    float f4 = 1e1;
    float f5 = -.2e+1;
    float f6 = 3.e-1;

    double d1 = 1.;
    double d2 = .234;
}

@test(mismatched_primitive_type)
@error(ERROR_MISMATCHED_TYPE)
contract test {
    int i = 1.0;
}

@test(character_value)
contract test {
    // byte b1 = 1;
    // byte b2 = 0x02;
    // byte b3 = "a";

    string v1 = "";
    string v2 = "literal";
    string v3 = "literal \"include quotation\"";
    string v4 = "literal /* with */ // comments";
}

@test(unterminated_string)
@error(ERROR_UNTERMINATED_STRING)
contract test {
    string v = "unterminated string\";
}

@test(predefined_constant)
contract test {
    bool v1 = true;
    bool v2 = false;
    map(int, string) m = null;
}

@test(array_initializer)
contract test {
    int v1[3] = { 1, 2, 3 };
    int v2[3] = { 1, 2, 3, };
    string v3[3] = { "a", "b", "c" };
    int v4[1], v5[2] = { 1 }, { 2, 3 } ;

    int v6[1 + 1] = { 1, 2 };
    int v7[1 * 3 - 1] = { 3, 4 };

    //int v8[2][2] = { { 1, 1 }, { 2, 2 } };
}

@test(invalid_size_type)
@error(ERROR_INVALID_SIZE_TYPE)
contract test {
    int i["1"];
}

@test(invalid_size_value)
@error(ERROR_INVALID_SIZE_VAL)
contract test {
    int i = 1;
    int j[i];
}

@test(missing_array_size)
@error(ERROR_MISSING_ARR_SIZE)
contract test {
    int i[];
}

@test(invalid_array_initializer)
@error(ERROR_NOT_ALLOWED_INIT)
contract test {
    int i = { 1, 2 };
}

@test(invalid_array_brace)
@error(ERROR_MISMATCHED_TYPE)
contract test {
    int i[] = { { 1, 2, 3 } };
}

@test(mismatched_element_type)
@error(ERROR_MISMATCHED_TYPE)
contract test {
    int i[] = { 1, 2, "3" };
}

@test(excess_element_count)
@error(ERROR_MISMATCHED_ELEM_CNT)
contract test {
    int i[1] = { 1, 2 };
}

@test(shortage_element_count)
@error(ERROR_MISMATCHED_ELEM_CNT)
contract test {
    int i[2] = { 1 };
}

@test(struct_initializer)
contract test {
    struct s1 {
        int a;
        int b;
        string c;
    }
    s1 v1 = { 1, 0x01, "a" };
    s1 v2, v3 = { 1, 0x01, "a" }, { 2, 0x02, "b" };

    struct s2 {
        int x;
        s1 y;
    }
    s2 v4 = { 1, { 1, 1, "1" } };
    s2 v5, v6 = { 1, { 1, 0x01, "a" } }, { 2, { 2, 0x02, "b" } };
}

@test(mismatched_field_type)
@error(ERROR_MISMATCHED_TYPE)
contract test {
    struct s1 {
        int a;
        string b;
    }
    s1 v1 = { "a", "b" };
}

@test(excess_field_count)
@error(ERROR_MISMATCHED_ELEM_CNT)
contract test {
    struct s1 {
        int a;
        string b;
    }
    s1 v1 = { 1, "b", "c" };
}

@test(shortage_field_count)
@error(ERROR_MISMATCHED_ELEM_CNT)
contract test {
    struct s1 {
        int a;
        string b;
    }
    s1 v1 = { 1, "b", "c" };
}

@test(struct_array_initializer)
contract test {
    struct s1 {
        int a;
        int b;
        string c;
    }
    s1 v2[2] = { { 1, 0x01, "a" }, { 2, 0x02, "b" } };
    s1 v3[1], v4[1] = { { 1, 0x01, "a" } }, { { 2, 0x02, "b" } };

    struct s2 {
        int x;
        s1 y;
    }
    s2 v6[2] = { { 1, { 1, 1, "1" } }, { 2, { 2, 2, "2" } } };
    s2 v7[1], v8[1] = { { 1, { 1, 1, "1" } } }, { { 2, { 2, 2, "2" } } };

    struct s3 {
        s1 x;
    }
    s3 v10[1] = { { { 10, 10, "v10" } } };
    s3 v11[2] = { { { 11, 11, "v11[0]" } }, { { 11, 11, "v11[1]" } } };
}


@test(map_initializer)
contract test {
    map(int, string) m1 = new map();
    map(int, string) m2 = new map(10);
    map(int, string) m3 = { { 1, "value1" } };
    map(int, string) m4 = { { 1, "value1" }, { 2, "value2" } };
}

@test(map_array_initializer)
contract test {
    map(int, string) m1[1] = { 
        { { 1, "value1" } } 
    };
    map(int, string) m2[2] = {
        { { 1, "value1" }, { 2, "value2" }, { 3, "value3" } },
        { { 1, "value1" }, { 2, "value2" }, { 3, "value3" } }
    };
}
