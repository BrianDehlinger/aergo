@test(numeric_value)
@run(test.check)
contract test {
    byte b1 = 0;
    byte b2 = +1;
    byte b3 = 0xff;

    int8 i1 = +127;
    int8 i2 = -0x80;

    uint8 ui1 = 0;
    uint8 ui2 = 0xff;

    int16 i3 = +32767;
    int16 i4 = -0x8000;

    uint16 ui3 = 0;
    uint16 ui4 = 0xffff;

    int32 i5 = +0x80000000 - 1;
    int32 i6 = -2147483648;

    uint32 ui5 = 0;
    uint32 ui6 = 4294967295;

    int64 i7 = 9223372036854775807;
    int64 i8 = -0x8000000000000000;

    uint64 ui7 = 0;
    uint64 ui8 = 18446744073709551615;

    int128 i9 = 170141183460469231731687303715884105727;
    int128 i10 = -170141183460469231731687303715884105728;

    uint128 ui9 = 0;
    uint128 ui10 = 340282366920938463463374607431768211455;

    /*
    float f1 = 1.0;
    float f2 = +1.1;
    float f3 = -1.2;
    float f4 = 1e1;
    float f5 = -.2e+1;
    float f6 = 3.e-1;
    float f7 = 340282346638528859811704183484516925440.000000;

    double d1 = 1.;
    double d2 = .234;
    */

    int i, j = 1, 0;

    public func check() {
        test t = new test();

        pragma assert(t.b1 == 0);
        pragma assert(t.b2 == 1);
        pragma assert(t.b3 == 255);

        pragma assert(t.i1 == 127);
        pragma assert(t.i2 == -128);

        pragma assert(t.ui1 == 0);
        pragma assert(t.ui2 == 255);

        pragma assert(t.i3 == 32767);
        pragma assert(t.i4 == -32768);

        pragma assert(t.ui3 == 0);
        pragma assert(t.ui4 == 65535);

        pragma assert(t.i5 == 2147483647);
        pragma assert(t.i6 == -2147483648);

        pragma assert(t.ui5 == 0);
        pragma assert(t.ui6 == 4294967295);

        pragma assert(t.i7 == 9223372036854775807);
        pragma assert(t.i8 == -9223372036854775808);

        pragma assert(t.ui7 == 0);
        pragma assert(t.ui8 == 18446744073709551615);

        pragma assert(t.i9 == 170141183460469231731687303715884105727);
        pragma assert(t.i10 == -170141183460469231731687303715884105728);

        pragma assert(t.ui9 == 0);
        pragma assert(t.ui10 == 340282366920938463463374607431768211455);

        pragma assert(t.i == 1);
        pragma assert(t.j == 0);
    }
}

@test(mismatched_primitive_type)
@error(ERROR_MISMATCHED_TYPE,2)
contract test {
    int i = "1";
    string s = 1;
}

@test(numeric_overflow)
@error(ERROR_NUMERIC_OVERFLOW,18)
contract test {
    byte b1 = -1;
    byte b2 = 257;

    int8 i1 = -129;
    int8 i2 = 128;

    uint8 ui1 = -1;
    uint8 ui2 = 257;

    int16 i3 = -32769;
    int16 i4 = 32768;

    uint16 ui3 = -1;
    uint16 ui4 = 65537;

    int32 i5 = -2147483649;
    int32 i6 = 2147483648;

    uint32 ui5 = -1;
    uint32 ui6 = 4294967296;

    int64 i7 = 9223372036854775808;
    int64 i8 = -9223372036854775809;

    uint64 ui7 = -1;
    uint64 ui8 = 18446744073709551616;

    /*
    float f1 = -340282446638528959811704183484516925441.000000;
    float f2 = 340282446638528959811704183484516925441.000000;
    */
}

@test(character_value)
@run(test.check)
contract test {
    string v1 = "";
    string v2 = "literal";
    string v3 = "literal \"include quotation\"";
    string v4 = "literal /* with */ // comments";

    public func check() {
        test t = new test();

        pragma assert(t.v1 == "");
        pragma assert(t.v2 == "literal");
        pragma assert(t.v3 == "literal \"include quotation\"");
        pragma assert(t.v4 == "literal /* with */ // comments");
    }
}

@test(unterminated_string)
@error(ERROR_UNTERMINATED_STRING)
contract test {
    string v = "unterminated string\";
}

@test(predefined_constant)
@run(test.check)
contract test {
    bool b1 = true;
    bool b2 = false;
    string s = null;
    map(int, string) m = null;

    public func check() {
        test t = new test();

        pragma assert(t.b1 == true);
        pragma assert(t.b2 == false);
        pragma assert(t.s == null);
        pragma assert(t.m == null);
    }
}

@test(array_initializer)
@run(test.check)
contract test {
    bool b1[2] = new { true, false };
    byte b2[2] = new { 0xa, 0xb };

    int8 i1[3] = new { -1, 0, 1, };
    int16 i2[1], i3[2] = new { 1024 }, new { 0x0000, 0xffff };

    int i4[1 + 1] = new { 1, 2 };
    int i5[1 * 3 - 1] = new { 3, 4 };

    int i6[2][2] = new { { 1, 2 }, { 3, 4 } };
    int i7[] = new { 4, 5, 6 };

    uint32 u1[3] = new { 0, 1, 2, };
    uint64 u2[1], u3[2] = new { 1 }, new { 2, 3 } ;

    string s[3] = new { "a", "b", "c" };

    public func check() {
        test t = new test();

        pragma assert(t.b1[0] == true);
        pragma assert(t.b1[1] == false);

        pragma assert(t.b2[0] == 10);
        pragma assert(t.b2[1] == 11);

        pragma assert(t.i1[0] == -1);
        pragma assert(t.i1[1] == 0);
        pragma assert(t.i1[2] == 1);

        pragma assert(t.i2[0] == 1024);

        pragma assert(t.i3[0] == 0);
        pragma assert(t.i3[1] == -1);

        pragma assert(t.i4[0] == 1);
        pragma assert(t.i4[1] == 2);

        pragma assert(t.i5[0] == 3);
        pragma assert(t.i5[1] == 4);

        pragma assert(t.i6[0][0] == 1);
        pragma assert(t.i6[0][1] == 2);
        pragma assert(t.i6[1][0] == 3);
        pragma assert(t.i6[1][1] == 4);

        pragma assert(t.i7[0] == 4);
        pragma assert(t.i7[1] == 5);
        pragma assert(t.i7[2] == 6);

        pragma assert(t.u1[0] == 0);
        pragma assert(t.u1[1] == 1);
        pragma assert(t.u1[2] == 2);

        pragma assert(t.u2[0] == 1);

        pragma assert(t.u3[0] == 2);
        pragma assert(t.u3[1] == 3);

        pragma assert(t.s[0] == "a");
        pragma assert(t.s[1] == "b");
        pragma assert(t.s[2] == "c");
    }
}

@test(empty_initializer)
@error(ERROR_SYNTAX)
contract test {
    int i[1] = new { };
}

@test(non_array_initializer)
@error(ERROR_MISMATCHED_TYPE)
contract test {
    int i = new { 1, 2 };
}

@test(invalid_array_brace)
@error(ERROR_MISMATCHED_TYPE)
contract test {
    int i[] = new { { 1, 2, 3 } };
}

@test(mismatched_element_type)
@error(ERROR_MISMATCHED_TYPE)
contract test {
    int i[2][2] = new { { 1, 1 }, { 2, "2" } };
}

@test(mismatched_element_count)
@error(ERROR_MISMATCHED_COUNT,4)
contract test {
    int i[1] = new { 1, 2 };
    int j[2] = new { 1 };
    int k[3][2] = new { { 1, 2 }, { 3 } };
    int l[3][2] = new { { 1, 2 }, { 3, 4, 5 } };
}

@test(array_allocator)
@run(test.check)
contract test {
    bool b[1] = new bool[1];
    int64 i[2] = new int64[2];
    //double d[3] = new double[3];
    string s[4] = new string[4];

    int v1[] = new int[2];
    int v2[][] = new int[2][2];
    int v3[][4] = new int[2][4];

    public func check() {
        test t = new test();

        pragma assert(t.b[0] == false);
        pragma assert(t.i[1] == 0);
        pragma assert(t.s[1] == "");
        pragma assert(t.s[3] == null);
        pragma assert(t.v1[1] == 0);
        pragma assert(t.v2[1][1] == 0);
        pragma assert(t.v3[0][2] == 0);
        pragma assert(t.v3[1][3] == 0);
    }
}

@test(struct_initializer)
@run(test.check)
contract test {
    type s1 struct {
        int a;
        byte b;
        string c;
    }
    s1 v1 = new { 1, 0x01, "a" };
    s1 v2, v3 = new { 2, 0x02, "b" }, new { 3, 0x03, "c" };

    /*
    type s2 struct {
        uint16 a;
        double b[2];
    }
    s2 v4 = new { 128, { 5.34, 314e-2 } };
    */

    type s3 struct {
        int x;
        s1 y;
    }
    s3 v5 = new { 1, { 2, 3, "4" } };
    s3 v6, v7 = new { 1, { 1, 0x01, "a" } }, new { 2, { 2, 0x02, "b" } };

    public func check() {
        test t = new test();

        pragma assert(t.v1.a == 1);
        pragma assert(t.v1.b == 1);
        pragma assert(t.v1.c == "a");

        pragma assert(t.v2.a == 2);
        pragma assert(t.v2.b == 2);
        pragma assert(t.v2.c == "b");

        pragma assert(t.v3.a == 3);
        pragma assert(t.v3.b == 3);
        pragma assert(t.v3.c == "c");

        pragma assert(t.v5.x == 1);
        pragma assert(t.v5.y.a == 2);
        pragma assert(t.v5.y.b == 3);
        pragma assert(t.v5.y.c == "4");
    }
}

@test(mismatched_field_type)
@error(ERROR_MISMATCHED_TYPE)
contract test {
    type s1 struct {
        int a;
        string b;
    }
    s1 v1 = new { "a", "b" };
}

@test(excess_field_count)
@error(ERROR_MISMATCHED_COUNT)
contract test {
    type s1 struct {
        int a;
        string b;
    }
    s1 v1 = new { 1, "b", "c" };
}

@test(shortage_field_count)
@error(ERROR_MISMATCHED_COUNT)
contract test {
    type s1 struct {
        int a;
        string b;
    }
    s1 v1 = new { 1, "b", "c" };
}

@test(struct_allocator)
@run(test.check)
contract test {
    type s1 struct {
        int a;
        byte b;
        string c;
    }
    s1 v1 = new s1;
    s1 v2 = new s1;

    public func check() {
        test t = new test();

        pragma assert(t.v1.a == 0);
        pragma assert(t.v1.b == 0);
        pragma assert(t.v1.c == "");

        pragma assert(t.v2.a == 0);
        pragma assert(t.v2.b == 0);
        pragma assert(t.v2.c == null);
    }
}

@test(struct_array_initializer)
@run(test.check)
contract test {
    type s1 struct {
        int a;
        int b;
        string c;
    }
    s1 v1[2] = new { { 1, 0x80, "a" }, { 2, 0x81, "b" } };
    s1 v2[1], v3[1] = new { { 1, 0x01, "a" } }, new { { 2, 0x02, "b" } };
    s1 v4[2][2] = new {
        { { 1, 0x01, "a" }, { 2, 0x02, "b" } },
        { { 3, 0x03, "c" }, { 4, 0x04, "d" } },
    };

    type s2 struct {
        int x;
        s1 y;
    }
    s2 v5[2] = new { { 1, { 1, 1, "1" } }, { 2, { 2, 2, "2" } } };
    s2 v6[1], v7[1] = new { { 1, { 1, 1, "1" } } }, new { { 2, { 2, 2, "2" } } };

    type s3 struct {
        s1 x;
    }
    s3 v8[1] = new { { { 10, 10, "v10" } } };
    s3 v9[2] = new { { { 11, 11, "v11[0]" } }, { { 11, 11, "v11[1]" } } };

    public func check() {
        test t = new test();

        pragma assert(t.v1[0].a == 1);
        pragma assert(t.v1[0].b == 128);
        pragma assert(t.v1[0].c == "a");
        pragma assert(t.v1[1].a == 2);
        pragma assert(t.v1[1].b == 129);
        pragma assert(t.v1[1].c == "b");

        pragma assert(t.v3[0].a == 2);
        pragma assert(t.v3[0].b == 2);
        pragma assert(t.v3[0].c == "b");

        pragma assert(t.v4[0][0].a == 1);
        pragma assert(t.v4[0][0].b == 1);
        pragma assert(t.v4[0][0].c == "a");
        pragma assert(t.v4[0][1].a == 2);
        pragma assert(t.v4[0][1].b == 2);
        pragma assert(t.v4[0][1].c == "b");
        pragma assert(t.v4[1][0].a == 3);
        pragma assert(t.v4[1][0].b == 3);
        pragma assert(t.v4[1][0].c == "c");
        pragma assert(t.v4[1][1].a == 4);
        pragma assert(t.v4[1][1].b == 4);
        pragma assert(t.v4[1][1].c == "d");

        pragma assert(t.v5[0].x == 1);
        pragma assert(t.v5[0].y.a == 1);
        pragma assert(t.v5[0].y.b == 1);
        pragma assert(t.v5[0].y.c == "1");
        pragma assert(t.v5[1].x == 2);
        pragma assert(t.v5[1].y.a == 2);
        pragma assert(t.v5[1].y.b == 2);
        pragma assert(t.v5[1].y.c == "2");

        pragma assert(t.v8[0].x.a == 10);
        pragma assert(t.v8[0].x.b == 10);
        pragma assert(t.v8[0].x.c == "v10");

        pragma assert(t.v9[1].x.a == 11);
        pragma assert(t.v9[1].x.b == 11);
        pragma assert(t.v9[1].x.c == "v11[1]");
    }
}

@test(struct_array_allocator)
@run(test.check)
contract test {
    type s1 struct {
        bool a;
        int b;
        string c;
    }
    s1 v1[2] = new s1[2];
    s1 v2[3] = new s1[3];

    public func check() {
        test t = new test();

        pragma assert(t.v1[0].a == false);
        pragma assert(t.v1[0].b == 0);
        pragma assert(t.v1[0].c == "");
        pragma assert(t.v1[1].a == false);
        pragma assert(t.v1[1].b == 0);
        pragma assert(t.v1[1].c == null);

        pragma assert(t.v2[0].a == false);
        pragma assert(t.v2[0].b == 0);
        pragma assert(t.v2[0].c == "");
        pragma assert(t.v2[1].a == false);
        pragma assert(t.v2[1].b == 0);
        pragma assert(t.v2[1].c == null);
        pragma assert(t.v2[2].a == false);
        pragma assert(t.v2[2].b == 0);
        pragma assert(t.v2[2].c == "");
    }
}

@test(map_initializer)
contract test {
    map(int, string) m1 = new { { 1, "value1" } };
    map(int, string) m2 = new { { 1, "value1" }, { 2, "value2" } };

    map(bool, map(int, string)) m3 =
        new { { true, { { 3, "3" } } }, { false, { { 4, "4" } } } };

    map(bool, map(int, string)) m4 = new { { true, m1 }, { false, m2 } };
}

@test(map_allocator)
contract test {
    map(int, string) m1 = new map(int, string);
}

@test(map_array_initializer)
contract test {
    map(int, string) m1[1] = new {
        { { 1, "value1" } }
    };
    map(int, string) m2[2] = new {
        { { 1, "value1" }, { 2, "value2" }, { 3, "value3" } },
        { { 1, "value1" }, { 2, "value2" }, { 3, "value3" } }
    };
}

@test(map_array_allocator)
contract test {
    map(int, string) m1[2] = new map(int, string)[2];
    map(int, string) m2[] = new map(int, string)[2];
}

@test(contract_initializer)
@error(ERROR_MISMATCHED_TYPE)
contract sub {
    int i;
    string s;
}
contract test {
    sub v = new { -1, "failure" };
}

@test(initializer_with_variable)
@run(test.check)
contract test {
    bool b1 = false;
    bool b2[2] = new { true, b1 };
    bool b3[2][3] = new { { true, b1, b1 }, { b1, true, true } };

    int i1 = 128;
    int i2 = 512;
    int i3[3] = new { i1, 256, i2 };

    string s1 = "No.2";
    string s2[3] = new { "No.1", s1, "No.3" };

    type s struct {
        int a;
        string b;
    }
    s v1 = new { -8, s1 };
    s v2[2] = new { { v1.a, s1 }, { i1 - 126, v1.b } };

    public func check() {
        test t = new test();

        pragma assert(t.b2[0] == true);
        pragma assert(t.b2[1] == false);

        pragma assert(t.b3[0][0] == true);
        pragma assert(t.b3[0][1] == false);
        pragma assert(t.b3[0][2] == b1);
        pragma assert(t.b3[1][0] == false);
        pragma assert(t.b3[1][1] == true);
        pragma assert(t.b3[1][2] == true);

        pragma assert(t.i3[0] == t.i1);
        pragma assert(t.i3[1] == 256);
        pragma assert(t.i3[2] == 512);

        pragma assert(t.s2[0] == "No.1");
        pragma assert(t.s2[1] == "No.2");
        pragma assert(t.s2[2] == "No.3");

        pragma assert(t.v2[0].a == -8);
        pragma assert(t.v2[0].b == "No.2");
        pragma assert(t.v2[1].a == 2);
        pragma assert(t.v2[1].b == "No.2");
    }
}

@test(not_array_allocator)
@error(ERROR_INVALID_INITIALIZER)
contract test {
    int i[2] = new int;
}

@test(missing_allocator_size)
@error(ERROR_SYNTAX)
contract test {
    int i[2] = new int[];
}

@test(invalid_allocator_size)
@error(ERROR_INVALID_SIZE_VAL,3)
contract test {
    int i[2] = new int[0];
    int j[2] = new int["2"];

    int x = 1;
    int k[2] = new int[x + 1];
}

@test(mismatched_allocator_size)
@error(ERROR_MISMATCHED_COUNT,5)
contract test {
    int i1[2] = new int[1];
    int i2[2] = new int[3];
    int i3[2][2] = new int[2][3];

    type s1 struct {
        int a;
        int b;
    }
    s1 v[2] = new s1[1];

    map(int, string) m[2] = new map(int, string)[3];
}

@test(mismatched_allocator_type)
@error(ERROR_MISMATCHED_TYPE,2)
contract test {
    int i[2] = new int16[2];

    /*
    type s1 struct {
        bool a;
        double b;
    }
    s1 s[1] = new s1;
    */

    map(int, string) m[2] = new map(int, string);
}
