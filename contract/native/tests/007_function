@test(empty_function)
contract test {
    func f1() { }
    func f2() {
        ;
    }
}

@test(function_modifier)
contract test {
    public func f1() { }
    public payable func f2() { }
    public readonly func f3() { }
    public readonly payable func f4() { }
    readonly func f5() { }
    readonly payable func f6() { }
    payable func f7() { }
}

@test(invalid_payable_modifier)
@error(ERROR_SYNTAX)
contract test {
    payable public func f1() { }
}

@test(duplicated_function)
@error(ERROR_DUPLICATED_ID)
contract test {
    func f1() { }
    func f1() { }
}

@test(duplicated_name_with_variable)
@error(ERROR_DUPLICATED_ID)
contract test {
    int f;
    func f() { }
}

@test(parameter_declaration)
contract test {
    func f1(int p1) { }
    func f2(int p1, string p2) { }
    func f3(int p1, map(int, string) p2) { }
    func f4(int p1[]) { }
}

@test(access_parameters)
contract test {
    struct s {
        int a;
        string b;
    }
    s v;
    map(int, string) m;
    func f1(int x, string y) { v.a = x; v.b = y; }
    func f2(int x, string y) { m[x] = y; }
    func f3(s x) {
        int i;
        for (i = 0; i < x.a; i++) { }
        if (x.b == "b") { }
    }

    test() {
        f1(1, "1");
        f2(2, "2");
        f3(v);
    }
}

@test(array_as_parameter)
contract test {
    func f1(int p1[]) {
        p1[0] = 1;
    }
    func f2(int p1[2]) {
        p1[0] = 1;
        p1[1] = 2;
    }
}

@test(return_declaration)
contract test {
    func f1() { return; }
    func f2() int { return 1; }
    func f3() int, string { return 1 + 1, "value"; }
    func f4() map(int, string) { return null; }
}

@test(return_primitive_value)
contract test {
    func f1(int x) int { return x + 1; }
    func f2(bool x, int y) bool, int { return !x, y << 1; }
    int i;
    bool b;

    test() {
        i = f1(1);
        b, i = f2(true, 2);
    }
}

@test(return_composite_value)
contract test {
    struct s {
        int a;
        string b;
    }

    func f1(int x, string y) s { s v = new { x, y }; return v; }
    func f2(int x, string y) s { return new { x, y }; }
    func f3() map(int, string) { return new map(); }

    test() {
        s v = f1(1, "1");
        int a = f1(2, "2").a;
        string b = f2(2, "2").b;

        map(int, string) m = f3();
        m[1] = f3()[1];
    }
}

@test(return_contract)
contract ref {
    public int a;
    public string b;
    public func f() int { return 0; }
}

contract test {
    func f() ref { new ref(); }

    test() {
        ref v = f();
        int a = f().a;
        string b = f().b;
        int c = f().f();
    }
}

@test(function_as_lvalue)
@error(ERROR_INVALID_LVALUE)
contract test {
    func f() int { return 1; }

    test() {
        f() = 2;
    }
}

@test(function_declaration_order)
@error(ERROR_UNDEFINED_ID)
contract test {
    test() {
        int v = f1();
    }
    func f1() int { return 1; }
}

@test(goto_across_function)
@error(ERROR_UNDEFINED_LABEL)
contract test {
    test() { }
    func f1() { here: ; }
    func f2() { goto here; }
}

