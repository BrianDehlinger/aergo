@test(empty_function)
contract test {
    func f1() { }
    func f2() {
        ;
    }
}

@test(function_modifier)
contract test {
    public func f1() { }
    public payable func f2() { }
    payable func f3() { }
}

@test(invalid_payable_modifier)
@error(ERROR_SYNTAX)
contract test {
    payable public func f1() { }
}

@test(duplicated_function)
@error(ERROR_DUPLICATED_ID)
contract test {
    func f1() { }
    func f1() { }
}

@test(duplicated_name_with_variable)
@error(ERROR_DUPLICATED_ID)
contract test {
    int f;
    func f() { }
}

@test(parameter_declaration)
contract test {
    func f1(int p1) { }
    func f2(int p1, string p2) { }
    func f3(int p1, map(int, string) p2) { }
    func f4(int p1[]) { }
    func f5(const int p1) { }
    func f6(string p1, const string p2) { }
}

@test(access_parameters)
@run(test.test)
contract test {
    type s struct {
        int a;
        string b;
    }
    s v;
    map(int, string) m;
    func f1(int x, string y) { v.a = x; v.b = y; }
    func f2(int x, string y) { m[x] = y; }
    func f3(s x) {
        int i;
        for (i = 0; i < x.a; i++) { }
        if (x.b == "b") { }
    }
    test() {
        f1(1, "1");
        pragma assert(v.a == 1);
        pragma assert(v.b == "1");

        f2(2, "2");
        //f3(v);
    }
}

@test(overwrite_parameter)
@run(test.test)
contract test {
    func f(int x, string y) {
        x++;
        y += "invalid";
    }
    test() {
        int p1 = 1;
        string p2 = "time";

        f(p1, p2);
        pragma assert(p1 == 1);
        pragma assert(p2 == "time");
    }
}

@test(access_constant_parameter)
@error(ERROR_INVALID_LVALUE)
contract test {
    func f1(const int x) {
        x = 1;
    }
}

@test(array_as_parameter)
@run(test.test)
contract test {
    func f1(int p1[]) {
        p1[0] = 1;
    }
    func f2(int p1[2]) {
        p1[0] = 5;
        p1[1] = 6;
    }

    test() {
        int x[] = new { 3, 4 };

        f1(x);
        pragma assert(x[0] == 1);
        pragma assert(x[1] == 4);

        f2(x);
        pragma assert(x[0] == 5);
        pragma assert(x[1] == 6);
    }
}

@test(contract_as_parameter)
@run(test.test)
contract test {
    int16 a;
    string b;

    func f1(test p) {
        p.a = f2();
        p.b = p.f3();
    }
    func f2() int16 {
        return -10;
    }
    func f3() string {
        return "train";
    }

    test() {
        test c = new test();

        f1(c);
        pragma assert(c.a == -10);
        pragma assert(c.b == "train");
    }
}

@test(return_declaration)
contract test {
    func f1() { return; }
    func f2() int { return 1; }
    //func f3() int, string { return 1 + 1, "value"; }
    func f4() map(int, string) { return null; }
}

@test(return_primitive)
contract test {
    func f1(int x) int { return x + 1; }
    //func f2(double x) bool { return x == 1.0; }
    //func f3(bool x, int y) bool, int { return !x, y << 1; }

    int i = f1(5);
    bool b;

    test() {
        //b = f2(1.0);
        //b, i = f3(true, 2);
    }
}

@test(return_array)
contract test {
    func f1() int[2] { return new int[2]; }
    func f2() int16[2] { return new { 0, 32767 }; }
    //func f3() float[] { return new float[3]; }
    //func f4() double[] { return new { -29.2134 }; }
    func f5() string[][] { return new string[3][2]; }

    test() {
        int i[] = f1();
        i[0] = -87;

        int16 j[] = f2();
        j[1] = 1027;

        /*
        float f[] = f3();
        f[2] = 12.50;

        double d[] = f4();
        d[0] += 29.2133;
        */

        string s[][] = f5();
        s[2][1] = "April";
    }
}

@test(return_struct)
contract test {
    type s struct {
        int a;
        string b;
    }

    func f1(int x, string y) s { s v = new { x, y }; return v; }
    func f2(int x, string y) s { return new { x, y }; }

    test() {
        s v = f1(1, "1");
        int a = f1(2, "2").a;
        string b = f2(2, "2").b;
    }
}

@test(return_map)
contract test {
    func f() map(int, string) { return new map(int, string); }

    test() {
        map(int, string) m = f();
        m[1] = f()[1];
    }
}

@test(return_function)
contract test {
    /*
    func f1(double x) double { return x * 2.0; }
    func f2(float x) double { return f1((double)x); }

    test() {
        double v = f2(1.0);
    }
    */
}

@test(return_contract)
contract ref {
    public int a;
    public string b;
    public func f() bool { return true; }
}

contract test {
    func f() ref { return new ref(); }

    test() {
        ref v = f();
        int a1 = v.a;
        string b1 = v.b;
        bool c1 = v.f();

        int a2 = f().a;
        string b2 = f().b;
        bool c2 = f().f();
    }
}

@test(return_value_assignment)
contract test {
    type s struct {
        int a;
        string b;
    }

    //func f1(int x) int, double { return x + 1, (double)x; }
    func f1(int16 x) int { return (int)x + 1; }
    //func f2(int x) double { return (double)x * 2.0; }
    func f3(int x, string y) s { return new { x, y }; }

    test() {
        int i;
        i = f1(9);
        //double d;
        //d = f2(-5);

        s v;
        i, v = f1(3), f3(5, "tuple");
        /*
        i, d = f1(0);

        s v;
        i, d, v = f1(1), f2(3, "3");
        */
    }
}

@test(return_value_overflow)
@error(ERROR_NUMERIC_OVERFLOW)
contract test {
    func f1() int8 { return 1024; }
}

@test(missing_return_statement)
@error(ERROR_MISSING_RETURN,2)
contract test {
    //func f1() double { }
    func f2() string {
        //double v = f1();
    }
    func f3() int {
        int x;
    }
}

@test(function_as_lvalue)
@error(ERROR_INVALID_LVALUE,2)
contract test {
    type s struct {
        int a;
    }
    func f1() int { return 1; }
    func f2() s { return new { 1 }; }

    test() {
        f1() = 2;
        f2().a = 3;
    }
}

@test(function_declaration_order)
contract test {
    test() {
        int v = f1();
    }
    func f1() int { return 1; }
}

@test(goto_across_function)
@error(ERROR_UNDEFINED_LABEL)
contract test {
    func f1() { here: ; }
    func f2() { goto here; }
}

@test(access_private_function)
@error(ERROR_UNDEFINED_ID)
contract test1 {
    func f() { }
}
contract test2 {
    func f() { new test1().f(); }
}

@test(call_across_contract)
contract neighbor {
    public int v;
    neighbor(int p) {
        v = p;
    }
    public func f() int {
        return v;
    }
}

contract test {
    int v;
    func f() int {
        neighbor n = new neighbor(1);
        v = n.v;
        return n.f();
    }
}

@test(builtin_functions)
@run(test.test)
contract test {
    int8 v1 = (int8)abs32((int32)1);
    int16 v2 = (int16)abs32((int32)0);
    int32 v3 = abs32(-1);
    int64 v4 = abs64(-2);
    int128 v5 = abs128(-3);

    test() {
        pragma assert(v1 == 1);
        pragma assert(v2 == 0);
        pragma assert(v3 == 1);
        pragma assert(v4 == 2);
        pragma assert(v5 == 3);

        pragma assert(lower("LOWER") == "lower");
        pragma assert(upper("upper") == "UPPER");
    }
}
