@desc primitive_type
contract test {
    int v1;
    int16 v2;
    int32 v3;
    int64 v4;
    uint v5;
    uint16 v6;
    uint32 v7;
    uint64 v8;
    float v9;
    double v10;
    bool v11;
    byte v12;
    string v13;
    int v14, v15;
}

@desc incompatible_declaration
@error SYNTAX_ERROR
contract test {
    int v16, string v17;
}

@desc constant_qualifier
contract test {
    const int v;
}

@desc invalid_qualifier_position
@error SYNTAX_ERROR
contract test {
    int const v;
}

@desc type_modifier
contract test {
    local int v1;
    shared int v1;
}

@desc invalid_type_modifier
@error SYNTAX_ERROR
contract test {
    public int v1;
    private int v1;
}

@desc primitive_array
contract test {
    int v1[10];
    int v2, v3[10];
    int v4[10], v5;
    int v6[10], v7[10];

    byte v8[];
    byte v9[], v10[];
}

@desc invalid_brace_position
@error SYNTAX_ERROR
contract test {
    int[10] v;
}

@desc missing_declarator
@error SYNTAX_ERROR
contract test {
    int;
}

@desc missing_semicolon
@error SYNTAX_ERROR
contract test {
    int v
}

@desc struct_type
contract test {
    struct s1 {
        int a;
        byte b;
        bool c[10];
    }
    s1 v1;

    struct s2 {
        s1 a;
    }
}

@desc struct_array
contract test {
    struct s {
        int a, b;
        string c;
    }
    s y[10];
}

@desc empty_struct
@error SYNTAX_ERROR
contract test {
    struct s {
    }
    s x[10];
}

@desc struct_of_struct
@error SYNTAX_ERROR
contract test {
    struct outer {
        struct inner {
            int a;
        }
    }
    s x;
}

@desc map_type
contract test {
    map(int, string) v1;
    map(v, string) v2;
    map(byte, v) v3;
}
