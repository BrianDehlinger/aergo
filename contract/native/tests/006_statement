@test(assignment)
contract test {
    int v1;
    int v2;
    string v3, v4;
    bool v5, v6;

    test() {
        v1 += 1;
        v1 -= 1;
        v1 *= 1 + 1;
        v1 /= 2;
        v1 %= 10;

        v2 |= 0xff;
        v2 &= 0x01;
        v2 ^= 0x01;

        v1, v2 = 1, 2;
        (v1, v2) = 1 * 1, 2;
        v3, v4 = ("a", "b");
        v3, v4 = ("a", "b");
    }
}

@test(unary_expression)
contract test {
    int v1 = 1;

    test() {
        v1++;
        ++v1;
        v1--;
        --v1;
        ;
    }
}

@test(if_else)
contract test {
    int v1 = 1;
    string v2;

    test() {
        if (0 == 0) {
            v2 = "sole if";
        }

        if (!true) {
            v2 = "this is if";
        }
        else {
            v2 = "this is else";
        }

        if (v1 == 1) {
            v2 = "first";
        } else if (v1 == 2) {
            v2 = "second";
        } else {
            v2 = "don't care";
        }
    }
}

@test(missing_if_parenthesis)
@error(ERROR_SYNTAX)
contract test {
    test() {
        if 1 == 1 {
            ;
        }
    }
}

@test(missing_if_brace)
@error(ERROR_SYNTAX)
contract test {
    test() {
        if (1 == 1) 
            ;
    }
}

@test(switch_case)
contract test {
    int v1;
    string v2;

    test() {
        switch (v1) {
        case 1:
            v2 = "case 1";
            break;
        case 2:
            { v2 = "case 2"; }
            break;
        default:
            break;
        }

        switch {
        case v1 == 1: { }
            break;
        case v1 == 1 + 1:
            break;
        }
    }
}

@test(for_loop)
contract test {
    int v1;

    test() {
        int i;
        for (i = 0; i < 10; i++) { 
            v1 += i;
        }
        for (int j = 1 + 1; j >= 0; i--) { }
        for ( ; i < 10; ) { }
        for ( ; i < 10; i++) { }
        for ( ; ; i++) { }
        for ( ; ; ) { }
        for (true) { }
        for {
            v1++;
            if (v1 % 2 == 0) {
                break;
            }
            else {
                continue;
            }
        }
    }
}

@test(foreach_loop)
contract test {
    string v1[10];

    test() {
        foreach (int i, string j in v1) { }
        foreach (int i, string j in f1()) { }

        //foreach (int i, string j = range v1) { }
    }
}

@test(goto_label)
contract test {
    test() {
here:
        goto here;
    }
}

@test(inline_ddl)
contract test {
    int v1;
    string v2;
    test() {
        create table t (c1 number);
        create table t (
            c1 number,
            c2 varchar(100)
        );
        create index idx on t (c1);
        drop table t;
    }
}

@test(invalid_ddl_object)
@error(ERROR_SYNTAX)
contract test {
    int v1;
    test() {
        create view v as select * from t;
    }
}

@test(inline_dml)
contract test {
    int v1;
    string v2;
    test() {
        insert into emp values (10, 'Sam');
        int cnt = insert into 
            emp values (20, 'Bill');

        delete from emp where id = 10;
        cnt = delete from emp 
            where name = 'Bill';

        update emp set name = 'Tom' where c1 = 10;
    }
}

@test(inline_query)
contract test {
    int v1;
    string v2;
    test() {
        /*
        v1 = select id from emp;
        v1, v2 = 
            select id, 
                   name 
              from emp;
              */
    }
}

@test(missing_sql_terminator)
@error(ERROR_SYNTAX)
contract test {
    int v1;
    test() {
        v1 = select id from emp
    }
}
