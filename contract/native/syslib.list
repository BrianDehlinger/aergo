/**
 * @file    syslib.list
 * @copyright defined in aergo/LICENSE.txt
 */

#ifndef fn_def
#define fn_def(kind, name, argc, argv, result)
#endif

fn_def(FN_MALLOC, "__malloc", 2, { TYPE_INT32, TYPE_INT32 }, TYPE_INT32)
fn_def(FN_ALLOCA, "__alloca", 2, { TYPE_INT32, TYPE_INT32 }, TYPE_INT32)
fn_def(FN_MEMCPY, "__memcpy", 3, { TYPE_INT32, TYPE_INT32, TYPE_INT32 }, TYPE_VOID)
fn_def(FN_MEMSET, "__memset", 3, { TYPE_INT32, TYPE_INT8, TYPE_INT32 }, TYPE_VOID)
fn_def(FN_ASSERT, "__assert", 6, { TYPE_BOOL, TYPE_STRING, TYPE_STRING, TYPE_INT32, TYPE_INT32, TYPE_INT32 }, TYPE_VOID)
fn_def(FN_ALIGN, "__align", 2, { TYPE_INT32, TYPE_INT32 }, TYPE_INT32)
fn_def(FN_STACK_OVF, "__stack_overflow", 0, { TYPE_NONE }, TYPE_VOID)
fn_def(FN_STRLEN, "__strlen", 1, { TYPE_STRING }, TYPE_INT32)
fn_def(FN_STRCAT, "__strcat", 2, { TYPE_STRING, TYPE_STRING }, TYPE_STRING)
fn_def(FN_STRCMP, "__strcmp", 2, { TYPE_STRING, TYPE_STRING }, TYPE_INT32)
fn_def(FN_STRDUP, "__strdup", 1, { TYPE_STRING }, TYPE_STRING)
fn_def(FN_STRCPY, "__strcpy", 2, { TYPE_STRING, TYPE_STRING }, TYPE_VOID)
fn_def(FN_ATOI32, "__atoi32", 1, { TYPE_STRING }, TYPE_INT32)
fn_def(FN_ATOI64, "__atoi64", 1, { TYPE_STRING }, TYPE_INT64)
fn_def(FN_ITOA32, "__itoa32", 1, { TYPE_INT32 }, TYPE_STRING)
fn_def(FN_ITOA64, "__itoa64", 1, { TYPE_INT64 }, TYPE_STRING)
fn_def(FN_CTOA, "__ctoa", 1, { TYPE_BYTE }, TYPE_STRING)
fn_def(FN_MPZ_GET_I32, "__mpz_get_i32", 1, { TYPE_INT32 }, TYPE_INT32)
fn_def(FN_MPZ_GET_I64, "__mpz_get_i64", 1, { TYPE_INT32 }, TYPE_INT64)
fn_def(FN_MPZ_GET_STR, "__mpz_get_str", 1, { TYPE_INT32 }, TYPE_STRING)
fn_def(FN_MPZ_SET_I32, "__mpz_set_i32", 1, { TYPE_INT32 }, TYPE_INT32)
fn_def(FN_MPZ_SET_I64, "__mpz_set_i64", 1, { TYPE_INT64 }, TYPE_INT32)
fn_def(FN_MPZ_SET_STR, "__mpz_set_str", 1, { TYPE_STRING }, TYPE_INT32)
fn_def(FN_MPZ_ADD, "__mpz_add", 2, { TYPE_INT32, TYPE_INT32 }, TYPE_INT32)
fn_def(FN_MPZ_SUB, "__mpz_sub", 2, { TYPE_INT32, TYPE_INT32 }, TYPE_INT32)
fn_def(FN_MPZ_MUL, "__mpz_mul", 2, { TYPE_INT32, TYPE_INT32 }, TYPE_INT32)
fn_def(FN_MPZ_DIV, "__mpz_div", 2, { TYPE_INT32, TYPE_INT32 }, TYPE_INT32)
fn_def(FN_MPZ_MOD, "__mpz_mod", 2, { TYPE_INT32, TYPE_INT32 }, TYPE_INT32)
fn_def(FN_MPZ_AND, "__mpz_and", 2, { TYPE_INT32, TYPE_INT32 }, TYPE_INT32)
fn_def(FN_MPZ_OR, "__mpz_or", 2, { TYPE_INT32, TYPE_INT32 }, TYPE_INT32)
fn_def(FN_MPZ_XOR, "__mpz_xor", 2, { TYPE_INT32, TYPE_INT32 }, TYPE_INT32)
fn_def(FN_MPZ_RSHIFT, "__mpz_rshift", 2, { TYPE_INT32, TYPE_INT32 }, TYPE_INT32)
fn_def(FN_MPZ_LSHIFT, "__mpz_lshift", 2, { TYPE_INT32, TYPE_INT32 }, TYPE_INT32)
fn_def(FN_MPZ_CMP, "__mpz_cmp", 2, { TYPE_INT32, TYPE_INT32 }, TYPE_INT32)
fn_def(FN_MPZ_NEG, "__mpz_neg", 1, { TYPE_INT32 }, TYPE_INT32)
fn_def(FN_MPZ_SIGN, "__mpz_sign", 1, { TYPE_INT32 }, TYPE_INT8)
fn_def(FN_ARR_GET_I32, "__array_get_i32", 4, { TYPE_INT32, TYPE_INT32, TYPE_INT32, TYPE_INT32 }, TYPE_INT32)
fn_def(FN_ARR_GET_I64, "__array_get_i64", 4, { TYPE_INT32, TYPE_INT32, TYPE_INT32, TYPE_INT32 }, TYPE_INT32)
fn_def(FN_CHAR_GET, "__char_get", 2, { TYPE_INT32, TYPE_INT32 }, TYPE_BYTE)
fn_def(FN_CHAR_SET, "__char_set", 3, { TYPE_INT32, TYPE_INT32, TYPE_BYTE }, TYPE_VOID)
fn_def(FN_MAP_NEW_I32_I32, "__map_new_i32_i32", 0, { TYPE_NONE }, TYPE_INT32)
fn_def(FN_MAP_NEW_I32_I64, "__map_new_i32_i64", 0, { TYPE_NONE }, TYPE_INT32)
fn_def(FN_MAP_NEW_I64_I32, "__map_new_i64_i32", 0, { TYPE_NONE }, TYPE_INT32)
fn_def(FN_MAP_NEW_I64_I64, "__map_new_i64_i64", 0, { TYPE_NONE }, TYPE_INT32)
fn_def(FN_MAP_GET_I32_I32, "__map_get_i32_i32", 2, { TYPE_INT32, TYPE_INT32 }, TYPE_INT32)
fn_def(FN_MAP_GET_I32_I64, "__map_get_i32_i64", 2, { TYPE_INT32, TYPE_INT32 }, TYPE_INT64)
fn_def(FN_MAP_GET_I64_I32, "__map_get_i64_i32", 2, { TYPE_INT64, TYPE_INT64 }, TYPE_INT32)
fn_def(FN_MAP_GET_I64_I64, "__map_get_i64_i64", 2, { TYPE_INT64, TYPE_INT64 }, TYPE_INT64)
fn_def(FN_MAP_PUT_I32_I32, "__map_put_i32_i32", 3, { TYPE_INT32, TYPE_INT32, TYPE_INT32 }, TYPE_VOID)
fn_def(FN_MAP_PUT_I32_I64, "__map_put_i32_i64", 3, { TYPE_INT32, TYPE_INT32, TYPE_INT64 }, TYPE_VOID)
fn_def(FN_MAP_PUT_I64_I32, "__map_put_i64_i32", 3, { TYPE_INT32, TYPE_INT64, TYPE_INT32 }, TYPE_VOID)
fn_def(FN_MAP_PUT_I64_I64, "__map_put_i64_i64", 3, { TYPE_INT32, TYPE_INT64, TYPE_INT64 }, TYPE_VOID)
