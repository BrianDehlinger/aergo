package p2p

import crypto "github.com/libp2p/go-libp2p-crypto"
import mock "github.com/stretchr/testify/mock"

import types "github.com/aergoio/aergo/types"

// mockMsgSigner is an autogenerated mock type for the msgSigner type
type mockMsgSigner struct {
	mock.Mock
}

// signMsg provides a mock function with given fields: msg
func (_m *mockMsgSigner) signMsg(msg *types.P2PMessage) error {
	ret := _m.Called(msg)

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.P2PMessage) error); ok {
		r0 = rf(msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// vefifyMsg provides a mock function with given fields: msg, pubKey
func (_m *mockMsgSigner) vefifyMsg(msg *types.P2PMessage, pubKey crypto.PubKey) error {
	ret := _m.Called(msg, pubKey)

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.P2PMessage, crypto.PubKey) error); ok {
		r0 = rf(msg, pubKey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
