// Code generated by MockGen. DO NOT EDIT.
// Source: certificate.go

// Package p2pmock is a generated GoMock package.
package p2pmock

import (
	p2pcommon "github.com/aergoio/aergo/p2p/p2pcommon"
	types "github.com/aergoio/aergo/types"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCertificateManager is a mock of CertificateManager interface
type MockCertificateManager struct {
	ctrl     *gomock.Controller
	recorder *MockCertificateManagerMockRecorder
}

// MockCertificateManagerMockRecorder is the mock recorder for MockCertificateManager
type MockCertificateManagerMockRecorder struct {
	mock *MockCertificateManager
}

// NewMockCertificateManager creates a new mock instance
func NewMockCertificateManager(ctrl *gomock.Controller) *MockCertificateManager {
	mock := &MockCertificateManager{ctrl: ctrl}
	mock.recorder = &MockCertificateManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCertificateManager) EXPECT() *MockCertificateManagerMockRecorder {
	return m.recorder
}

// CreateCertificate mocks base method
func (m *MockCertificateManager) CreateCertificate(remoteMeta p2pcommon.PeerMeta) (*p2pcommon.AgentCertificateV1, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCertificate", remoteMeta)
	ret0, _ := ret[0].(*p2pcommon.AgentCertificateV1)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCertificate indicates an expected call of CreateCertificate
func (mr *MockCertificateManagerMockRecorder) CreateCertificate(remoteMeta interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCertificate", reflect.TypeOf((*MockCertificateManager)(nil).CreateCertificate), remoteMeta)
}

// GetProducers mocks base method
func (m *MockCertificateManager) GetProducers() []types.PeerID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProducers")
	ret0, _ := ret[0].([]types.PeerID)
	return ret0
}

// GetProducers indicates an expected call of GetProducers
func (mr *MockCertificateManagerMockRecorder) GetProducers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProducers", reflect.TypeOf((*MockCertificateManager)(nil).GetProducers))
}

// GetCertificates mocks base method
func (m *MockCertificateManager) GetCertificates() []*p2pcommon.AgentCertificateV1 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCertificates")
	ret0, _ := ret[0].([]*p2pcommon.AgentCertificateV1)
	return ret0
}

// GetCertificates indicates an expected call of GetCertificates
func (mr *MockCertificateManagerMockRecorder) GetCertificates() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertificates", reflect.TypeOf((*MockCertificateManager)(nil).GetCertificates))
}

// AddCertificate mocks base method
func (m *MockCertificateManager) AddCertificate(cert *p2pcommon.AgentCertificateV1) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddCertificate", cert)
}

// AddCertificate indicates an expected call of AddCertificate
func (mr *MockCertificateManagerMockRecorder) AddCertificate(cert interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCertificate", reflect.TypeOf((*MockCertificateManager)(nil).AddCertificate), cert)
}
