// Code generated by MockGen. DO NOT EDIT.
// Source: p2p/p2pcommon/message.go

// Package p2pmock is a generated GoMock package.
package p2pmock

import (
	p2pcommon "github.com/aergoio/aergo/p2p/p2pcommon"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMessage is a mock of Message interface
type MockMessage struct {
	ctrl     *gomock.Controller
	recorder *MockMessageMockRecorder
}

// MockMessageMockRecorder is the mock recorder for MockMessage
type MockMessageMockRecorder struct {
	mock *MockMessage
}

// NewMockMessage creates a new mock instance
func NewMockMessage(ctrl *gomock.Controller) *MockMessage {
	mock := &MockMessage{ctrl: ctrl}
	mock.recorder = &MockMessageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMessage) EXPECT() *MockMessageMockRecorder {
	return m.recorder
}

// Subprotocol mocks base method
func (m *MockMessage) Subprotocol() p2pcommon.SubProtocol {
	ret := m.ctrl.Call(m, "Subprotocol")
	ret0, _ := ret[0].(p2pcommon.SubProtocol)
	return ret0
}

// Subprotocol indicates an expected call of Subprotocol
func (mr *MockMessageMockRecorder) Subprotocol() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subprotocol", reflect.TypeOf((*MockMessage)(nil).Subprotocol))
}

// Length mocks base method
func (m *MockMessage) Length() uint32 {
	ret := m.ctrl.Call(m, "Length")
	ret0, _ := ret[0].(uint32)
	return ret0
}

// Length indicates an expected call of Length
func (mr *MockMessageMockRecorder) Length() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Length", reflect.TypeOf((*MockMessage)(nil).Length))
}

// Timestamp mocks base method
func (m *MockMessage) Timestamp() int64 {
	ret := m.ctrl.Call(m, "Timestamp")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Timestamp indicates an expected call of Timestamp
func (mr *MockMessageMockRecorder) Timestamp() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Timestamp", reflect.TypeOf((*MockMessage)(nil).Timestamp))
}

// ID mocks base method
func (m *MockMessage) ID() p2pcommon.MsgID {
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(p2pcommon.MsgID)
	return ret0
}

// ID indicates an expected call of ID
func (mr *MockMessageMockRecorder) ID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockMessage)(nil).ID))
}

// OriginalID mocks base method
func (m *MockMessage) OriginalID() p2pcommon.MsgID {
	ret := m.ctrl.Call(m, "OriginalID")
	ret0, _ := ret[0].(p2pcommon.MsgID)
	return ret0
}

// OriginalID indicates an expected call of OriginalID
func (mr *MockMessageMockRecorder) OriginalID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OriginalID", reflect.TypeOf((*MockMessage)(nil).OriginalID))
}

// Payload mocks base method
func (m *MockMessage) Payload() []byte {
	ret := m.ctrl.Call(m, "Payload")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Payload indicates an expected call of Payload
func (mr *MockMessageMockRecorder) Payload() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Payload", reflect.TypeOf((*MockMessage)(nil).Payload))
}

// MockHandlerFactory is a mock of HandlerFactory interface
type MockHandlerFactory struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerFactoryMockRecorder
}

// MockHandlerFactoryMockRecorder is the mock recorder for MockHandlerFactory
type MockHandlerFactoryMockRecorder struct {
	mock *MockHandlerFactory
}

// NewMockHandlerFactory creates a new mock instance
func NewMockHandlerFactory(ctrl *gomock.Controller) *MockHandlerFactory {
	mock := &MockHandlerFactory{ctrl: ctrl}
	mock.recorder = &MockHandlerFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHandlerFactory) EXPECT() *MockHandlerFactoryMockRecorder {
	return m.recorder
}

// InsertHandlers mocks base method
func (m *MockHandlerFactory) InsertHandlers(peer p2pcommon.RemotePeer) {
	m.ctrl.Call(m, "InsertHandlers", peer)
}

// InsertHandlers indicates an expected call of InsertHandlers
func (mr *MockHandlerFactoryMockRecorder) InsertHandlers(peer interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertHandlers", reflect.TypeOf((*MockHandlerFactory)(nil).InsertHandlers), peer)
}
