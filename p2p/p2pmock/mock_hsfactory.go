// Code generated by MockGen. DO NOT EDIT.
// Source: p2p/handshake.go

// Package p2pmock is a generated GoMock package.
package p2pmock

import (
	"github.com/aergoio/aergo-lib/log"
	"github.com/aergoio/aergo/p2p/p2pcommon"
	"github.com/aergoio/aergo/types"
	"github.com/golang/mock/gomock"
	go_libp2p_peer "github.com/libp2p/go-libp2p-peer"
	"io"
	"reflect"
	"time"
)

// MockHSHandlerFactory is a mock of HSHandlerFactory interface
type MockHSHandlerFactory struct {
	ctrl     *gomock.Controller
	recorder *MockHSHandlerFactoryMockRecorder
}

// MockHSHandlerFactoryMockRecorder is the mock recorder for MockHSHandlerFactory
type MockHSHandlerFactoryMockRecorder struct {
	mock *MockHSHandlerFactory
}

// NewMockHSHandlerFactory creates a new mock instance
func NewMockHSHandlerFactory(ctrl *gomock.Controller) *MockHSHandlerFactory {
	mock := &MockHSHandlerFactory{ctrl: ctrl}
	mock.recorder = &MockHSHandlerFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHSHandlerFactory) EXPECT() *MockHSHandlerFactoryMockRecorder {
	return m.recorder
}

// CreateHSHandler mocks base method
func (m *MockHSHandlerFactory) CreateHSHandler(outbound bool, pm p2pcommon.PeerManager, actor p2pcommon.ActorService, log *log.Logger, pid go_libp2p_peer.ID) p2pcommon.HSHandler {
	ret := m.ctrl.Call(m, "CreateHSHandler", outbound, pm, actor, log, pid)
	ret0, _ := ret[0].(p2pcommon.HSHandler)
	return ret0
}

// CreateHSHandler indicates an expected call of CreateHSHandler
func (mr *MockHSHandlerFactoryMockRecorder) CreateHSHandler(outbound, pm, actor, log, pid interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHSHandler", reflect.TypeOf((*MockHSHandlerFactory)(nil).CreateHSHandler), outbound, pm, actor, log, pid)
}

// MockHSHandler is a mock of HSHandler interface
type MockHSHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHSHandlerMockRecorder
}

// MockHSHandlerMockRecorder is the mock recorder for MockHSHandler
type MockHSHandlerMockRecorder struct {
	mock *MockHSHandler
}

// NewMockHSHandler creates a new mock instance
func NewMockHSHandler(ctrl *gomock.Controller) *MockHSHandler {
	mock := &MockHSHandler{ctrl: ctrl}
	mock.recorder = &MockHSHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHSHandler) EXPECT() *MockHSHandlerMockRecorder {
	return m.recorder
}

// Handle mocks base method
func (m *MockHSHandler) Handle(r io.Reader, w io.Writer, ttl time.Duration) (p2pcommon.MsgReadWriter, *types.Status, error) {
	ret := m.ctrl.Call(m, "Handle", r, w, ttl)
	ret0, _ := ret[0].(p2pcommon.MsgReadWriter)
	ret1, _ := ret[1].(*types.Status)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Handle indicates an expected call of Handle
func (mr *MockHSHandlerMockRecorder) Handle(r, w, ttl interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockHSHandler)(nil).Handle), r, w, ttl)
}

// MockinnerHandshaker is a mock of innerHandshaker interface
type MockinnerHandshaker struct {
	ctrl     *gomock.Controller
	recorder *MockinnerHandshakerMockRecorder
}

// MockinnerHandshakerMockRecorder is the mock recorder for MockinnerHandshaker
type MockinnerHandshakerMockRecorder struct {
	mock *MockinnerHandshaker
}

// NewMockinnerHandshaker creates a new mock instance
func NewMockinnerHandshaker(ctrl *gomock.Controller) *MockinnerHandshaker {
	mock := &MockinnerHandshaker{ctrl: ctrl}
	mock.recorder = &MockinnerHandshakerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockinnerHandshaker) EXPECT() *MockinnerHandshakerMockRecorder {
	return m.recorder
}

// doForOutbound mocks base method
func (m *MockinnerHandshaker) doForOutbound() (*types.Status, error) {
	ret := m.ctrl.Call(m, "doForOutbound")
	ret0, _ := ret[0].(*types.Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// doForOutbound indicates an expected call of doForOutbound
func (mr *MockinnerHandshakerMockRecorder) doForOutbound() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "doForOutbound", reflect.TypeOf((*MockinnerHandshaker)(nil).doForOutbound))
}

// doForInbound mocks base method
func (m *MockinnerHandshaker) doForInbound() (*types.Status, error) {
	ret := m.ctrl.Call(m, "doForInbound")
	ret0, _ := ret[0].(*types.Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// doForInbound indicates an expected call of doForInbound
func (mr *MockinnerHandshakerMockRecorder) doForInbound() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "doForInbound", reflect.TypeOf((*MockinnerHandshaker)(nil).doForInbound))
}

// GetMsgRW mocks base method
func (m *MockinnerHandshaker) GetMsgRW() p2pcommon.MsgReadWriter {
	ret := m.ctrl.Call(m, "GetMsgRW")
	ret0, _ := ret[0].(p2pcommon.MsgReadWriter)
	return ret0
}

// GetMsgRW indicates an expected call of GetMsgRW
func (mr *MockinnerHandshakerMockRecorder) GetMsgRW() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMsgRW", reflect.TypeOf((*MockinnerHandshaker)(nil).GetMsgRW))
}
