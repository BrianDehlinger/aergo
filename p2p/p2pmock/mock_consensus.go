// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aergoio/aergo/consensus (interfaces: ConsensusAccessor)

// Package mock_consensus is a generated GoMock package.
package p2pmock

import (
	consensus "github.com/aergoio/aergo/consensus"
	types "github.com/aergoio/aergo/types"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockConsensusAccessor is a mock of ConsensusAccessor interface
type MockConsensusAccessor struct {
	ctrl     *gomock.Controller
	recorder *MockConsensusAccessorMockRecorder
}

// MockConsensusAccessorMockRecorder is the mock recorder for MockConsensusAccessor
type MockConsensusAccessorMockRecorder struct {
	mock *MockConsensusAccessor
}

// NewMockConsensusAccessor creates a new mock instance
func NewMockConsensusAccessor(ctrl *gomock.Controller) *MockConsensusAccessor {
	mock := &MockConsensusAccessor{ctrl: ctrl}
	mock.recorder = &MockConsensusAccessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConsensusAccessor) EXPECT() *MockConsensusAccessorMockRecorder {
	return m.recorder
}

// ClusterInfo mocks base method
func (m *MockConsensusAccessor) ClusterInfo(arg0 []byte) *types.GetClusterInfoResponse {
	ret := m.ctrl.Call(m, "ClusterInfo", arg0)
	ret0, _ := ret[0].(*types.GetClusterInfoResponse)
	return ret0
}

// ClusterInfo indicates an expected call of ClusterInfo
func (mr *MockConsensusAccessorMockRecorder) ClusterInfo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterInfo", reflect.TypeOf((*MockConsensusAccessor)(nil).ClusterInfo), arg0)
}

// ConfChange mocks base method
func (m *MockConsensusAccessor) ConfChange(arg0 *types.MembershipChange) (*consensus.Member, error) {
	ret := m.ctrl.Call(m, "ConfChange", arg0)
	ret0, _ := ret[0].(*consensus.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfChange indicates an expected call of ConfChange
func (mr *MockConsensusAccessorMockRecorder) ConfChange(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfChange", reflect.TypeOf((*MockConsensusAccessor)(nil).ConfChange), arg0)
}

// ConfChangeInfo mocks base method
func (m *MockConsensusAccessor) ConfChangeInfo(arg0 uint64) (*types.ConfChangeProgress, error) {
	ret := m.ctrl.Call(m, "ConfChangeInfo", arg0)
	ret0, _ := ret[0].(*types.ConfChangeProgress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfChangeInfo indicates an expected call of ConfChangeInfo
func (mr *MockConsensusAccessorMockRecorder) ConfChangeInfo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfChangeInfo", reflect.TypeOf((*MockConsensusAccessor)(nil).ConfChangeInfo), arg0)
}

// ConsensusInfo mocks base method
func (m *MockConsensusAccessor) ConsensusInfo() *types.ConsensusInfo {
	ret := m.ctrl.Call(m, "ConsensusInfo")
	ret0, _ := ret[0].(*types.ConsensusInfo)
	return ret0
}

// ConsensusInfo indicates an expected call of ConsensusInfo
func (mr *MockConsensusAccessorMockRecorder) ConsensusInfo() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsensusInfo", reflect.TypeOf((*MockConsensusAccessor)(nil).ConsensusInfo))
}
