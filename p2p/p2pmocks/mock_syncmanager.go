// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aergoio/aergo/p2p/p2pcommon (interfaces: SyncManager)

// Package mock_p2pcommon is a generated GoMock package.
package p2pmocks

import (
	reflect "reflect"

	p2pcommon "github.com/aergoio/aergo/p2p/p2pcommon"
	types "github.com/aergoio/aergo/types"
	gomock "github.com/golang/mock/gomock"
)

// MockSyncManager is a mock of SyncManager interface
type MockSyncManager struct {
	ctrl     *gomock.Controller
	recorder *MockSyncManagerMockRecorder
}

// MockSyncManagerMockRecorder is the mock recorder for MockSyncManager
type MockSyncManagerMockRecorder struct {
	mock *MockSyncManager
}

// NewMockSyncManager creates a new mock instance
func NewMockSyncManager(ctrl *gomock.Controller) *MockSyncManager {
	mock := &MockSyncManager{ctrl: ctrl}
	mock.recorder = &MockSyncManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSyncManager) EXPECT() *MockSyncManagerMockRecorder {
	return m.recorder
}

// HandleBlockProducedNotice mocks base method
func (m *MockSyncManager) HandleBlockProducedNotice(arg0 p2pcommon.RemotePeer, arg1 *types.Block) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleBlockProducedNotice", arg0, arg1)
}

// HandleBlockProducedNotice indicates an expected call of HandleBlockProducedNotice
func (mr *MockSyncManagerMockRecorder) HandleBlockProducedNotice(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleBlockProducedNotice", reflect.TypeOf((*MockSyncManager)(nil).HandleBlockProducedNotice), arg0, arg1)
}

// HandleGetBlockResponse mocks base method
func (m *MockSyncManager) HandleGetBlockResponse(arg0 p2pcommon.RemotePeer, arg1 p2pcommon.Message, arg2 *types.GetBlockResponse) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleGetBlockResponse", arg0, arg1, arg2)
}

// HandleGetBlockResponse indicates an expected call of HandleGetBlockResponse
func (mr *MockSyncManagerMockRecorder) HandleGetBlockResponse(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleGetBlockResponse", reflect.TypeOf((*MockSyncManager)(nil).HandleGetBlockResponse), arg0, arg1, arg2)
}

// HandleNewBlockNotice mocks base method
func (m *MockSyncManager) HandleNewBlockNotice(arg0 p2pcommon.RemotePeer, arg1 *types.NewBlockNotice) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleNewBlockNotice", arg0, arg1)
}

// HandleNewBlockNotice indicates an expected call of HandleNewBlockNotice
func (mr *MockSyncManagerMockRecorder) HandleNewBlockNotice(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleNewBlockNotice", reflect.TypeOf((*MockSyncManager)(nil).HandleNewBlockNotice), arg0, arg1)
}

// HandleNewTxNotice mocks base method
func (m *MockSyncManager) HandleNewTxNotice(arg0 p2pcommon.RemotePeer, arg1 []types.TxID, arg2 *types.NewTransactionsNotice) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleNewTxNotice", arg0, arg1, arg2)
}

// HandleNewTxNotice indicates an expected call of HandleNewTxNotice
func (mr *MockSyncManagerMockRecorder) HandleNewTxNotice(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleNewTxNotice", reflect.TypeOf((*MockSyncManager)(nil).HandleNewTxNotice), arg0, arg1, arg2)
}
