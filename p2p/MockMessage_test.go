/*
 * @file
 * @copyright defined in aergo/LICENSE.txt
 */

// Code generated by mockery v1.0.0. DO NOT EDIT.
package p2p

import mock "github.com/stretchr/testify/mock"

// MockMessage is an autogenerated mock type for the Message type
type MockMessage struct {
	mock.Mock
}

// ID provides a mock function with given fields:
func (_m *MockMessage) ID() MsgID {
	ret := _m.Called()

	var r0 MsgID
	if rf, ok := ret.Get(0).(func() MsgID); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(MsgID)
		}
	}

	return r0
}

// Length provides a mock function with given fields:
func (_m *MockMessage) Length() uint32 {
	ret := _m.Called()

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// OriginalID provides a mock function with given fields:
func (_m *MockMessage) OriginalID() MsgID {
	ret := _m.Called()

	var r0 MsgID
	if rf, ok := ret.Get(0).(func() MsgID); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(MsgID)
		}
	}

	return r0
}

// Payload provides a mock function with given fields:
func (_m *MockMessage) Payload() []byte {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// Subprotocol provides a mock function with given fields:
func (_m *MockMessage) Subprotocol() SubProtocol {
	ret := _m.Called()

	var r0 SubProtocol
	if rf, ok := ret.Get(0).(func() SubProtocol); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(SubProtocol)
	}

	return r0
}

// Timestamp provides a mock function with given fields:
func (_m *MockMessage) Timestamp() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}
