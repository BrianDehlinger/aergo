// Code generated by protoc-gen-go. DO NOT EDIT.
// source: blockchain.proto

package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type TxType int32

const (
	TxType_NORMAL     TxType = 0
	TxType_GOVERNANCE TxType = 1
)

var TxType_name = map[int32]string{
	0: "NORMAL",
	1: "GOVERNANCE",
}
var TxType_value = map[string]int32{
	"NORMAL":     0,
	"GOVERNANCE": 1,
}

func (x TxType) String() string {
	return proto.EnumName(TxType_name, int32(x))
}
func (TxType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type Block struct {
	Hash   []byte       `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Header *BlockHeader `protobuf:"bytes,2,opt,name=header" json:"header,omitempty"`
	Body   *BlockBody   `protobuf:"bytes,3,opt,name=body" json:"body,omitempty"`
}

func (m *Block) Reset()                    { *m = Block{} }
func (m *Block) String() string            { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()               {}
func (*Block) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Block) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *Block) GetHeader() *BlockHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Block) GetBody() *BlockBody {
	if m != nil {
		return m.Body
	}
	return nil
}

type BlockHeader struct {
	PrevBlockHash  []byte `protobuf:"bytes,1,opt,name=prevBlockHash,proto3" json:"prevBlockHash,omitempty"`
	BlockNo        uint64 `protobuf:"varint,2,opt,name=blockNo" json:"blockNo,omitempty"`
	Timestamp      int64  `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	BlocksRootHash []byte `protobuf:"bytes,4,opt,name=blocksRootHash,proto3" json:"blocksRootHash,omitempty"`
	TxsRootHash    []byte `protobuf:"bytes,5,opt,name=txsRootHash,proto3" json:"txsRootHash,omitempty"`
	Confirms       uint64 `protobuf:"varint,6,opt,name=confirms" json:"confirms,omitempty"`
	PubKey         []byte `protobuf:"bytes,7,opt,name=pubKey,proto3" json:"pubKey,omitempty"`
	Sign           []byte `protobuf:"bytes,8,opt,name=sign,proto3" json:"sign,omitempty"`
}

func (m *BlockHeader) Reset()                    { *m = BlockHeader{} }
func (m *BlockHeader) String() string            { return proto.CompactTextString(m) }
func (*BlockHeader) ProtoMessage()               {}
func (*BlockHeader) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *BlockHeader) GetPrevBlockHash() []byte {
	if m != nil {
		return m.PrevBlockHash
	}
	return nil
}

func (m *BlockHeader) GetBlockNo() uint64 {
	if m != nil {
		return m.BlockNo
	}
	return 0
}

func (m *BlockHeader) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *BlockHeader) GetBlocksRootHash() []byte {
	if m != nil {
		return m.BlocksRootHash
	}
	return nil
}

func (m *BlockHeader) GetTxsRootHash() []byte {
	if m != nil {
		return m.TxsRootHash
	}
	return nil
}

func (m *BlockHeader) GetConfirms() uint64 {
	if m != nil {
		return m.Confirms
	}
	return 0
}

func (m *BlockHeader) GetPubKey() []byte {
	if m != nil {
		return m.PubKey
	}
	return nil
}

func (m *BlockHeader) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

type BlockBody struct {
	Txs []*Tx `protobuf:"bytes,1,rep,name=txs" json:"txs,omitempty"`
}

func (m *BlockBody) Reset()                    { *m = BlockBody{} }
func (m *BlockBody) String() string            { return proto.CompactTextString(m) }
func (*BlockBody) ProtoMessage()               {}
func (*BlockBody) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *BlockBody) GetTxs() []*Tx {
	if m != nil {
		return m.Txs
	}
	return nil
}

type TxList struct {
	Txs []*Tx `protobuf:"bytes,1,rep,name=txs" json:"txs,omitempty"`
}

func (m *TxList) Reset()                    { *m = TxList{} }
func (m *TxList) String() string            { return proto.CompactTextString(m) }
func (*TxList) ProtoMessage()               {}
func (*TxList) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *TxList) GetTxs() []*Tx {
	if m != nil {
		return m.Txs
	}
	return nil
}

type Tx struct {
	Hash []byte  `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Body *TxBody `protobuf:"bytes,2,opt,name=body" json:"body,omitempty"`
}

func (m *Tx) Reset()                    { *m = Tx{} }
func (m *Tx) String() string            { return proto.CompactTextString(m) }
func (*Tx) ProtoMessage()               {}
func (*Tx) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *Tx) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *Tx) GetBody() *TxBody {
	if m != nil {
		return m.Body
	}
	return nil
}

type TxBody struct {
	Nonce     uint64 `protobuf:"varint,1,opt,name=nonce" json:"nonce,omitempty"`
	Account   []byte `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
	Recipient []byte `protobuf:"bytes,3,opt,name=recipient,proto3" json:"recipient,omitempty"`
	Amount    uint64 `protobuf:"varint,4,opt,name=amount" json:"amount,omitempty"`
	Payload   []byte `protobuf:"bytes,5,opt,name=payload,proto3" json:"payload,omitempty"`
	Limit     uint64 `protobuf:"varint,6,opt,name=limit" json:"limit,omitempty"`
	Price     uint64 `protobuf:"varint,7,opt,name=price" json:"price,omitempty"`
	Sign      []byte `protobuf:"bytes,8,opt,name=sign,proto3" json:"sign,omitempty"`
	Type      TxType `protobuf:"varint,9,opt,name=type,enum=types.TxType" json:"type,omitempty"`
}

func (m *TxBody) Reset()                    { *m = TxBody{} }
func (m *TxBody) String() string            { return proto.CompactTextString(m) }
func (*TxBody) ProtoMessage()               {}
func (*TxBody) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *TxBody) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *TxBody) GetAccount() []byte {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *TxBody) GetRecipient() []byte {
	if m != nil {
		return m.Recipient
	}
	return nil
}

func (m *TxBody) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *TxBody) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *TxBody) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *TxBody) GetPrice() uint64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *TxBody) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

func (m *TxBody) GetType() TxType {
	if m != nil {
		return m.Type
	}
	return TxType_NORMAL
}

type TxIdx struct {
	BlockHash []byte `protobuf:"bytes,1,opt,name=blockHash,proto3" json:"blockHash,omitempty"`
	Idx       int32  `protobuf:"varint,2,opt,name=idx" json:"idx,omitempty"`
}

func (m *TxIdx) Reset()                    { *m = TxIdx{} }
func (m *TxIdx) String() string            { return proto.CompactTextString(m) }
func (*TxIdx) ProtoMessage()               {}
func (*TxIdx) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *TxIdx) GetBlockHash() []byte {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

func (m *TxIdx) GetIdx() int32 {
	if m != nil {
		return m.Idx
	}
	return 0
}

type TxInBlock struct {
	TxIdx *TxIdx `protobuf:"bytes,1,opt,name=txIdx" json:"txIdx,omitempty"`
	Tx    *Tx    `protobuf:"bytes,2,opt,name=tx" json:"tx,omitempty"`
}

func (m *TxInBlock) Reset()                    { *m = TxInBlock{} }
func (m *TxInBlock) String() string            { return proto.CompactTextString(m) }
func (*TxInBlock) ProtoMessage()               {}
func (*TxInBlock) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *TxInBlock) GetTxIdx() *TxIdx {
	if m != nil {
		return m.TxIdx
	}
	return nil
}

func (m *TxInBlock) GetTx() *Tx {
	if m != nil {
		return m.Tx
	}
	return nil
}

type State struct {
	Account []byte `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Nonce   uint64 `protobuf:"varint,2,opt,name=nonce" json:"nonce,omitempty"`
	Balance uint64 `protobuf:"varint,3,opt,name=balance" json:"balance,omitempty"`
}

func (m *State) Reset()                    { *m = State{} }
func (m *State) String() string            { return proto.CompactTextString(m) }
func (*State) ProtoMessage()               {}
func (*State) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func (m *State) GetAccount() []byte {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *State) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *State) GetBalance() uint64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

func init() {
	proto.RegisterType((*Block)(nil), "types.Block")
	proto.RegisterType((*BlockHeader)(nil), "types.BlockHeader")
	proto.RegisterType((*BlockBody)(nil), "types.BlockBody")
	proto.RegisterType((*TxList)(nil), "types.TxList")
	proto.RegisterType((*Tx)(nil), "types.Tx")
	proto.RegisterType((*TxBody)(nil), "types.TxBody")
	proto.RegisterType((*TxIdx)(nil), "types.TxIdx")
	proto.RegisterType((*TxInBlock)(nil), "types.TxInBlock")
	proto.RegisterType((*State)(nil), "types.State")
	proto.RegisterEnum("types.TxType", TxType_name, TxType_value)
}

func init() { proto.RegisterFile("blockchain.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 551 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x54, 0x4b, 0x6f, 0xd3, 0x4c,
	0x14, 0xfd, 0x1c, 0x3f, 0xda, 0xdc, 0xa4, 0x55, 0x34, 0xfa, 0x84, 0xcc, 0x43, 0xc8, 0x58, 0x01,
	0x45, 0x5d, 0xa4, 0x52, 0x58, 0xb0, 0x60, 0xd5, 0xa0, 0x0a, 0x02, 0x25, 0x15, 0x83, 0xc5, 0x82,
	0xdd, 0xd8, 0x1e, 0x92, 0x11, 0xb1, 0xc7, 0xb2, 0x27, 0x68, 0xfc, 0x9b, 0xf9, 0x0d, 0x48, 0x68,
	0xae, 0x9d, 0xc4, 0x89, 0x2a, 0x56, 0x9d, 0x73, 0xee, 0xfb, 0x9c, 0x3a, 0x30, 0x8a, 0x37, 0x32,
	0xf9, 0x99, 0xac, 0x99, 0xc8, 0xa7, 0x45, 0x29, 0x95, 0x24, 0xae, 0xaa, 0x0b, 0x5e, 0x85, 0x19,
	0xb8, 0x73, 0x13, 0x22, 0x04, 0x9c, 0x35, 0xab, 0xd6, 0xbe, 0x15, 0x58, 0x93, 0x21, 0xc5, 0x37,
	0xb9, 0x02, 0x6f, 0xcd, 0x59, 0xca, 0x4b, 0xbf, 0x17, 0x58, 0x93, 0xc1, 0x8c, 0x4c, 0xb1, 0x68,
	0x8a, 0x15, 0x1f, 0x30, 0x42, 0xdb, 0x0c, 0x32, 0x06, 0x27, 0x96, 0x69, 0xed, 0xdb, 0x98, 0x39,
	0xea, 0x66, 0xce, 0x65, 0x5a, 0x53, 0x8c, 0x86, 0x7f, 0x2c, 0x18, 0x74, 0xaa, 0xc9, 0x18, 0x2e,
	0x8a, 0x92, 0xff, 0x6a, 0xa8, 0xc3, 0xf8, 0x63, 0x92, 0xf8, 0x70, 0x86, 0xfb, 0x2f, 0x25, 0x2e,
	0xe2, 0xd0, 0x1d, 0x24, 0xcf, 0xa0, 0xaf, 0x44, 0xc6, 0x2b, 0xc5, 0xb2, 0x02, 0x47, 0xdb, 0xf4,
	0x40, 0x90, 0x57, 0x70, 0x89, 0x89, 0x15, 0x95, 0x52, 0x61, 0x7b, 0x07, 0xdb, 0x9f, 0xb0, 0x24,
	0x80, 0x81, 0xd2, 0x87, 0x24, 0x17, 0x93, 0xba, 0x14, 0x79, 0x02, 0xe7, 0x89, 0xcc, 0x7f, 0x88,
	0x32, 0xab, 0x7c, 0x0f, 0x57, 0xd8, 0x63, 0xf2, 0x08, 0xbc, 0x62, 0x1b, 0x7f, 0xe2, 0xb5, 0x7f,
	0x86, 0x85, 0x2d, 0x32, 0x8a, 0x56, 0x62, 0x95, 0xfb, 0xe7, 0x8d, 0xa2, 0xe6, 0x1d, 0x4e, 0xa0,
	0xbf, 0x97, 0x84, 0x3c, 0x05, 0x5b, 0xe9, 0xca, 0xb7, 0x02, 0x7b, 0x32, 0x98, 0xf5, 0x5b, 0xc5,
	0x22, 0x4d, 0x0d, 0x1b, 0xbe, 0x04, 0x2f, 0xd2, 0x77, 0xa2, 0x52, 0xff, 0x4e, 0x7b, 0x0b, 0xbd,
	0x48, 0x3f, 0x68, 0xde, 0x8b, 0xd6, 0x90, 0xc6, 0xba, 0x8b, 0x7d, 0x5d, 0xc7, 0x8d, 0xdf, 0x96,
	0x19, 0x82, 0xbb, 0xfc, 0x0f, 0x6e, 0x2e, 0xf3, 0x84, 0x63, 0x0b, 0x87, 0x36, 0xc0, 0x08, 0xcf,
	0x92, 0x44, 0x6e, 0x73, 0x85, 0x6d, 0x86, 0x74, 0x07, 0x8d, 0xf0, 0x25, 0x4f, 0x44, 0x21, 0x78,
	0xae, 0x50, 0xf8, 0x21, 0x3d, 0x10, 0x46, 0x12, 0x96, 0x61, 0x99, 0x83, 0xed, 0x5a, 0x64, 0xfa,
	0x15, 0xac, 0xde, 0x48, 0x96, 0xb6, 0x22, 0xef, 0xa0, 0x99, 0xbf, 0x11, 0x99, 0x50, 0xad, 0xba,
	0x0d, 0x30, 0x6c, 0x51, 0x8a, 0x84, 0xa3, 0xb2, 0x0e, 0x6d, 0xc0, 0x43, 0xc2, 0x9a, 0x6b, 0xcd,
	0x81, 0x7e, 0x3f, 0xb0, 0x26, 0x97, 0x9d, 0x6b, 0xa3, 0xba, 0xe0, 0x14, 0x43, 0xe1, 0x1b, 0x70,
	0x23, 0xbd, 0x48, 0xb5, 0xd9, 0x3d, 0x3e, 0xf9, 0x87, 0x3b, 0x10, 0x64, 0x04, 0xb6, 0x48, 0x35,
	0xde, 0xeb, 0x52, 0xf3, 0x0c, 0x3f, 0x42, 0x3f, 0xd2, 0x8b, 0xbc, 0xf9, 0x4e, 0x42, 0x70, 0x95,
	0xe9, 0x82, 0x85, 0x83, 0xd9, 0x70, 0x3f, 0x69, 0x91, 0x6a, 0xda, 0x84, 0xc8, 0x63, 0xe8, 0x29,
	0xdd, 0x0a, 0xdf, 0x31, 0xac, 0xa7, 0x74, 0xf8, 0x05, 0xdc, 0xaf, 0x8a, 0xa9, 0x23, 0x69, 0xad,
	0x63, 0x69, 0xf7, 0x56, 0xf4, 0x4e, 0xac, 0x88, 0xd9, 0x86, 0x19, 0xde, 0x6e, 0xbf, 0x81, 0x06,
	0x5e, 0x8d, 0x8d, 0x89, 0xe6, 0x4e, 0x02, 0xe0, 0x2d, 0xef, 0xe9, 0xe7, 0x9b, 0xbb, 0xd1, 0x7f,
	0xe4, 0x12, 0xe0, 0xfd, 0xfd, 0xb7, 0x5b, 0xba, 0xbc, 0x59, 0xbe, 0xbb, 0x1d, 0x59, 0xf3, 0xe0,
	0xfb, 0xf3, 0x95, 0x50, 0xeb, 0x6d, 0x3c, 0x4d, 0x64, 0x76, 0xcd, 0x78, 0xb9, 0x92, 0x42, 0x36,
	0x7f, 0xaf, 0x71, 0xc3, 0xd8, 0xc3, 0x1f, 0x86, 0xd7, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x26,
	0xdc, 0x77, 0x6e, 0x2c, 0x04, 0x00, 0x00,
}
