// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc.proto

package types // import "github.com/aergoio/aergo/types"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CommitStatus int32

const (
	CommitStatus_COMMIT_STATUS_OK                CommitStatus = 0
	CommitStatus_COMMIT_STATUS_NONCE_TOO_LOW     CommitStatus = 1
	CommitStatus_COMMIT_STATUS_INVALID_ARGUMENT  CommitStatus = 2
	CommitStatus_COMMIT_STATUS_TX_ALREADY_EXISTS CommitStatus = 3
	CommitStatus_COMMIT_STATUS_TX_INTERNAL_ERROR CommitStatus = 4
)

var CommitStatus_name = map[int32]string{
	0: "COMMIT_STATUS_OK",
	1: "COMMIT_STATUS_NONCE_TOO_LOW",
	2: "COMMIT_STATUS_INVALID_ARGUMENT",
	3: "COMMIT_STATUS_TX_ALREADY_EXISTS",
	4: "COMMIT_STATUS_TX_INTERNAL_ERROR",
}
var CommitStatus_value = map[string]int32{
	"COMMIT_STATUS_OK":                0,
	"COMMIT_STATUS_NONCE_TOO_LOW":     1,
	"COMMIT_STATUS_INVALID_ARGUMENT":  2,
	"COMMIT_STATUS_TX_ALREADY_EXISTS": 3,
	"COMMIT_STATUS_TX_INTERNAL_ERROR": 4,
}

func (x CommitStatus) String() string {
	return proto.EnumName(CommitStatus_name, int32(x))
}
func (CommitStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_rpc_25311dea4eb2eb6f, []int{0}
}

type VerifyStatus int32

const (
	VerifyStatus_VERIFY_STATUS_OK             VerifyStatus = 0
	VerifyStatus_VERIFY_STATUS_SIGN_NOT_MATCH VerifyStatus = 1
	VerifyStatus_VERIFY_STATUS_INVALID_HASH   VerifyStatus = 2
)

var VerifyStatus_name = map[int32]string{
	0: "VERIFY_STATUS_OK",
	1: "VERIFY_STATUS_SIGN_NOT_MATCH",
	2: "VERIFY_STATUS_INVALID_HASH",
}
var VerifyStatus_value = map[string]int32{
	"VERIFY_STATUS_OK":             0,
	"VERIFY_STATUS_SIGN_NOT_MATCH": 1,
	"VERIFY_STATUS_INVALID_HASH":   2,
}

func (x VerifyStatus) String() string {
	return proto.EnumName(VerifyStatus_name, int32(x))
}
func (VerifyStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_rpc_25311dea4eb2eb6f, []int{1}
}

// BlockchainStatus is current status of blockchain
type BlockchainStatus struct {
	BestBlockHash        []byte   `protobuf:"bytes,1,opt,name=best_block_hash,json=bestBlockHash,proto3" json:"best_block_hash,omitempty"`
	BestHeight           uint64   `protobuf:"varint,2,opt,name=best_height,json=bestHeight,proto3" json:"best_height,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockchainStatus) Reset()         { *m = BlockchainStatus{} }
func (m *BlockchainStatus) String() string { return proto.CompactTextString(m) }
func (*BlockchainStatus) ProtoMessage()    {}
func (*BlockchainStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpc_25311dea4eb2eb6f, []int{0}
}
func (m *BlockchainStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlockchainStatus.Unmarshal(m, b)
}
func (m *BlockchainStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlockchainStatus.Marshal(b, m, deterministic)
}
func (dst *BlockchainStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockchainStatus.Merge(dst, src)
}
func (m *BlockchainStatus) XXX_Size() int {
	return xxx_messageInfo_BlockchainStatus.Size(m)
}
func (m *BlockchainStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockchainStatus.DiscardUnknown(m)
}

var xxx_messageInfo_BlockchainStatus proto.InternalMessageInfo

func (m *BlockchainStatus) GetBestBlockHash() []byte {
	if m != nil {
		return m.BestBlockHash
	}
	return nil
}

func (m *BlockchainStatus) GetBestHeight() uint64 {
	if m != nil {
		return m.BestHeight
	}
	return 0
}

type Input struct {
	Hash                 []byte   `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Address              [][]byte `protobuf:"bytes,2,rep,name=address,proto3" json:"address,omitempty"`
	Value                []byte   `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	Script               []byte   `protobuf:"bytes,4,opt,name=script,proto3" json:"script,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Input) Reset()         { *m = Input{} }
func (m *Input) String() string { return proto.CompactTextString(m) }
func (*Input) ProtoMessage()    {}
func (*Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpc_25311dea4eb2eb6f, []int{1}
}
func (m *Input) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Input.Unmarshal(m, b)
}
func (m *Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Input.Marshal(b, m, deterministic)
}
func (dst *Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Input.Merge(dst, src)
}
func (m *Input) XXX_Size() int {
	return xxx_messageInfo_Input.Size(m)
}
func (m *Input) XXX_DiscardUnknown() {
	xxx_messageInfo_Input.DiscardUnknown(m)
}

var xxx_messageInfo_Input proto.InternalMessageInfo

func (m *Input) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *Input) GetAddress() [][]byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *Input) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Input) GetScript() []byte {
	if m != nil {
		return m.Script
	}
	return nil
}

type Output struct {
	Index                uint32   `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Address              []byte   `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Value                []byte   `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	Script               []byte   `protobuf:"bytes,4,opt,name=script,proto3" json:"script,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Output) Reset()         { *m = Output{} }
func (m *Output) String() string { return proto.CompactTextString(m) }
func (*Output) ProtoMessage()    {}
func (*Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpc_25311dea4eb2eb6f, []int{2}
}
func (m *Output) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Output.Unmarshal(m, b)
}
func (m *Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Output.Marshal(b, m, deterministic)
}
func (dst *Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Output.Merge(dst, src)
}
func (m *Output) XXX_Size() int {
	return xxx_messageInfo_Output.Size(m)
}
func (m *Output) XXX_DiscardUnknown() {
	xxx_messageInfo_Output.DiscardUnknown(m)
}

var xxx_messageInfo_Output proto.InternalMessageInfo

func (m *Output) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Output) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *Output) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Output) GetScript() []byte {
	if m != nil {
		return m.Script
	}
	return nil
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpc_25311dea4eb2eb6f, []int{3}
}
func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (dst *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(dst, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type SingleBytes struct {
	Value                []byte   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SingleBytes) Reset()         { *m = SingleBytes{} }
func (m *SingleBytes) String() string { return proto.CompactTextString(m) }
func (*SingleBytes) ProtoMessage()    {}
func (*SingleBytes) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpc_25311dea4eb2eb6f, []int{4}
}
func (m *SingleBytes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SingleBytes.Unmarshal(m, b)
}
func (m *SingleBytes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SingleBytes.Marshal(b, m, deterministic)
}
func (dst *SingleBytes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SingleBytes.Merge(dst, src)
}
func (m *SingleBytes) XXX_Size() int {
	return xxx_messageInfo_SingleBytes.Size(m)
}
func (m *SingleBytes) XXX_DiscardUnknown() {
	xxx_messageInfo_SingleBytes.DiscardUnknown(m)
}

var xxx_messageInfo_SingleBytes proto.InternalMessageInfo

func (m *SingleBytes) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type Personal struct {
	Passphrase           string   `protobuf:"bytes,1,opt,name=passphrase,proto3" json:"passphrase,omitempty"`
	Account              *Account `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Personal) Reset()         { *m = Personal{} }
func (m *Personal) String() string { return proto.CompactTextString(m) }
func (*Personal) ProtoMessage()    {}
func (*Personal) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpc_25311dea4eb2eb6f, []int{5}
}
func (m *Personal) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Personal.Unmarshal(m, b)
}
func (m *Personal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Personal.Marshal(b, m, deterministic)
}
func (dst *Personal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Personal.Merge(dst, src)
}
func (m *Personal) XXX_Size() int {
	return xxx_messageInfo_Personal.Size(m)
}
func (m *Personal) XXX_DiscardUnknown() {
	xxx_messageInfo_Personal.DiscardUnknown(m)
}

var xxx_messageInfo_Personal proto.InternalMessageInfo

func (m *Personal) GetPassphrase() string {
	if m != nil {
		return m.Passphrase
	}
	return ""
}

func (m *Personal) GetAccount() *Account {
	if m != nil {
		return m.Account
	}
	return nil
}

type PeerList struct {
	Peers                []*PeerAddress `protobuf:"bytes,1,rep,name=peers,proto3" json:"peers,omitempty"`
	States               []int32        `protobuf:"varint,2,rep,packed,name=states,proto3" json:"states,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *PeerList) Reset()         { *m = PeerList{} }
func (m *PeerList) String() string { return proto.CompactTextString(m) }
func (*PeerList) ProtoMessage()    {}
func (*PeerList) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpc_25311dea4eb2eb6f, []int{6}
}
func (m *PeerList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PeerList.Unmarshal(m, b)
}
func (m *PeerList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PeerList.Marshal(b, m, deterministic)
}
func (dst *PeerList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeerList.Merge(dst, src)
}
func (m *PeerList) XXX_Size() int {
	return xxx_messageInfo_PeerList.Size(m)
}
func (m *PeerList) XXX_DiscardUnknown() {
	xxx_messageInfo_PeerList.DiscardUnknown(m)
}

var xxx_messageInfo_PeerList proto.InternalMessageInfo

func (m *PeerList) GetPeers() []*PeerAddress {
	if m != nil {
		return m.Peers
	}
	return nil
}

func (m *PeerList) GetStates() []int32 {
	if m != nil {
		return m.States
	}
	return nil
}

type ListParams struct {
	Hash                 []byte   `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Height               uint64   `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	Size                 uint32   `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	Offset               uint32   `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
	Asc                  bool     `protobuf:"varint,5,opt,name=asc,proto3" json:"asc,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListParams) Reset()         { *m = ListParams{} }
func (m *ListParams) String() string { return proto.CompactTextString(m) }
func (*ListParams) ProtoMessage()    {}
func (*ListParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpc_25311dea4eb2eb6f, []int{7}
}
func (m *ListParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListParams.Unmarshal(m, b)
}
func (m *ListParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListParams.Marshal(b, m, deterministic)
}
func (dst *ListParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListParams.Merge(dst, src)
}
func (m *ListParams) XXX_Size() int {
	return xxx_messageInfo_ListParams.Size(m)
}
func (m *ListParams) XXX_DiscardUnknown() {
	xxx_messageInfo_ListParams.DiscardUnknown(m)
}

var xxx_messageInfo_ListParams proto.InternalMessageInfo

func (m *ListParams) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *ListParams) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *ListParams) GetSize() uint32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *ListParams) GetOffset() uint32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ListParams) GetAsc() bool {
	if m != nil {
		return m.Asc
	}
	return false
}

type BlockHeaderList struct {
	Blocks               []*Block `protobuf:"bytes,1,rep,name=blocks,proto3" json:"blocks,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockHeaderList) Reset()         { *m = BlockHeaderList{} }
func (m *BlockHeaderList) String() string { return proto.CompactTextString(m) }
func (*BlockHeaderList) ProtoMessage()    {}
func (*BlockHeaderList) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpc_25311dea4eb2eb6f, []int{8}
}
func (m *BlockHeaderList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlockHeaderList.Unmarshal(m, b)
}
func (m *BlockHeaderList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlockHeaderList.Marshal(b, m, deterministic)
}
func (dst *BlockHeaderList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockHeaderList.Merge(dst, src)
}
func (m *BlockHeaderList) XXX_Size() int {
	return xxx_messageInfo_BlockHeaderList.Size(m)
}
func (m *BlockHeaderList) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockHeaderList.DiscardUnknown(m)
}

var xxx_messageInfo_BlockHeaderList proto.InternalMessageInfo

func (m *BlockHeaderList) GetBlocks() []*Block {
	if m != nil {
		return m.Blocks
	}
	return nil
}

type CommitResult struct {
	Hash                 []byte       `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Error                CommitStatus `protobuf:"varint,2,opt,name=error,proto3,enum=types.CommitStatus" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *CommitResult) Reset()         { *m = CommitResult{} }
func (m *CommitResult) String() string { return proto.CompactTextString(m) }
func (*CommitResult) ProtoMessage()    {}
func (*CommitResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpc_25311dea4eb2eb6f, []int{9}
}
func (m *CommitResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommitResult.Unmarshal(m, b)
}
func (m *CommitResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommitResult.Marshal(b, m, deterministic)
}
func (dst *CommitResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitResult.Merge(dst, src)
}
func (m *CommitResult) XXX_Size() int {
	return xxx_messageInfo_CommitResult.Size(m)
}
func (m *CommitResult) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitResult.DiscardUnknown(m)
}

var xxx_messageInfo_CommitResult proto.InternalMessageInfo

func (m *CommitResult) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *CommitResult) GetError() CommitStatus {
	if m != nil {
		return m.Error
	}
	return CommitStatus_COMMIT_STATUS_OK
}

type CommitResultList struct {
	Results              []*CommitResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *CommitResultList) Reset()         { *m = CommitResultList{} }
func (m *CommitResultList) String() string { return proto.CompactTextString(m) }
func (*CommitResultList) ProtoMessage()    {}
func (*CommitResultList) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpc_25311dea4eb2eb6f, []int{10}
}
func (m *CommitResultList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommitResultList.Unmarshal(m, b)
}
func (m *CommitResultList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommitResultList.Marshal(b, m, deterministic)
}
func (dst *CommitResultList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitResultList.Merge(dst, src)
}
func (m *CommitResultList) XXX_Size() int {
	return xxx_messageInfo_CommitResultList.Size(m)
}
func (m *CommitResultList) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitResultList.DiscardUnknown(m)
}

var xxx_messageInfo_CommitResultList proto.InternalMessageInfo

func (m *CommitResultList) GetResults() []*CommitResult {
	if m != nil {
		return m.Results
	}
	return nil
}

type VerifyResult struct {
	Tx                   *Tx          `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
	Error                VerifyStatus `protobuf:"varint,2,opt,name=error,proto3,enum=types.VerifyStatus" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *VerifyResult) Reset()         { *m = VerifyResult{} }
func (m *VerifyResult) String() string { return proto.CompactTextString(m) }
func (*VerifyResult) ProtoMessage()    {}
func (*VerifyResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpc_25311dea4eb2eb6f, []int{11}
}
func (m *VerifyResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VerifyResult.Unmarshal(m, b)
}
func (m *VerifyResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VerifyResult.Marshal(b, m, deterministic)
}
func (dst *VerifyResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyResult.Merge(dst, src)
}
func (m *VerifyResult) XXX_Size() int {
	return xxx_messageInfo_VerifyResult.Size(m)
}
func (m *VerifyResult) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyResult.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyResult proto.InternalMessageInfo

func (m *VerifyResult) GetTx() *Tx {
	if m != nil {
		return m.Tx
	}
	return nil
}

func (m *VerifyResult) GetError() VerifyStatus {
	if m != nil {
		return m.Error
	}
	return VerifyStatus_VERIFY_STATUS_OK
}

func init() {
	proto.RegisterType((*BlockchainStatus)(nil), "types.BlockchainStatus")
	proto.RegisterType((*Input)(nil), "types.Input")
	proto.RegisterType((*Output)(nil), "types.Output")
	proto.RegisterType((*Empty)(nil), "types.Empty")
	proto.RegisterType((*SingleBytes)(nil), "types.SingleBytes")
	proto.RegisterType((*Personal)(nil), "types.Personal")
	proto.RegisterType((*PeerList)(nil), "types.PeerList")
	proto.RegisterType((*ListParams)(nil), "types.ListParams")
	proto.RegisterType((*BlockHeaderList)(nil), "types.BlockHeaderList")
	proto.RegisterType((*CommitResult)(nil), "types.CommitResult")
	proto.RegisterType((*CommitResultList)(nil), "types.CommitResultList")
	proto.RegisterType((*VerifyResult)(nil), "types.VerifyResult")
	proto.RegisterEnum("types.CommitStatus", CommitStatus_name, CommitStatus_value)
	proto.RegisterEnum("types.VerifyStatus", VerifyStatus_name, VerifyStatus_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AergoRPCServiceClient is the client API for AergoRPCService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AergoRPCServiceClient interface {
	NodeState(ctx context.Context, in *SingleBytes, opts ...grpc.CallOption) (*SingleBytes, error)
	Blockchain(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BlockchainStatus, error)
	ListBlockHeaders(ctx context.Context, in *ListParams, opts ...grpc.CallOption) (*BlockHeaderList, error)
	GetBlock(ctx context.Context, in *SingleBytes, opts ...grpc.CallOption) (*Block, error)
	GetTX(ctx context.Context, in *SingleBytes, opts ...grpc.CallOption) (*Tx, error)
	GetBlockTX(ctx context.Context, in *SingleBytes, opts ...grpc.CallOption) (*TxInBlock, error)
	GetReceipt(ctx context.Context, in *SingleBytes, opts ...grpc.CallOption) (*Receipt, error)
	GetABI(ctx context.Context, in *SingleBytes, opts ...grpc.CallOption) (*ABI, error)
	CommitTX(ctx context.Context, in *TxList, opts ...grpc.CallOption) (*CommitResultList, error)
	GetState(ctx context.Context, in *SingleBytes, opts ...grpc.CallOption) (*State, error)
	CreateAccount(ctx context.Context, in *Personal, opts ...grpc.CallOption) (*Account, error)
	GetAccounts(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AccountList, error)
	LockAccount(ctx context.Context, in *Personal, opts ...grpc.CallOption) (*Account, error)
	UnlockAccount(ctx context.Context, in *Personal, opts ...grpc.CallOption) (*Account, error)
	SignTX(ctx context.Context, in *Tx, opts ...grpc.CallOption) (*Tx, error)
	VerifyTX(ctx context.Context, in *Tx, opts ...grpc.CallOption) (*VerifyResult, error)
	GetPeers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PeerList, error)
}

type aergoRPCServiceClient struct {
	cc *grpc.ClientConn
}

func NewAergoRPCServiceClient(cc *grpc.ClientConn) AergoRPCServiceClient {
	return &aergoRPCServiceClient{cc}
}

func (c *aergoRPCServiceClient) NodeState(ctx context.Context, in *SingleBytes, opts ...grpc.CallOption) (*SingleBytes, error) {
	out := new(SingleBytes)
	err := c.cc.Invoke(ctx, "/types.AergoRPCService/NodeState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aergoRPCServiceClient) Blockchain(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BlockchainStatus, error) {
	out := new(BlockchainStatus)
	err := c.cc.Invoke(ctx, "/types.AergoRPCService/Blockchain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aergoRPCServiceClient) ListBlockHeaders(ctx context.Context, in *ListParams, opts ...grpc.CallOption) (*BlockHeaderList, error) {
	out := new(BlockHeaderList)
	err := c.cc.Invoke(ctx, "/types.AergoRPCService/ListBlockHeaders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aergoRPCServiceClient) GetBlock(ctx context.Context, in *SingleBytes, opts ...grpc.CallOption) (*Block, error) {
	out := new(Block)
	err := c.cc.Invoke(ctx, "/types.AergoRPCService/GetBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aergoRPCServiceClient) GetTX(ctx context.Context, in *SingleBytes, opts ...grpc.CallOption) (*Tx, error) {
	out := new(Tx)
	err := c.cc.Invoke(ctx, "/types.AergoRPCService/GetTX", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aergoRPCServiceClient) GetBlockTX(ctx context.Context, in *SingleBytes, opts ...grpc.CallOption) (*TxInBlock, error) {
	out := new(TxInBlock)
	err := c.cc.Invoke(ctx, "/types.AergoRPCService/GetBlockTX", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aergoRPCServiceClient) GetReceipt(ctx context.Context, in *SingleBytes, opts ...grpc.CallOption) (*Receipt, error) {
	out := new(Receipt)
	err := c.cc.Invoke(ctx, "/types.AergoRPCService/GetReceipt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aergoRPCServiceClient) GetABI(ctx context.Context, in *SingleBytes, opts ...grpc.CallOption) (*ABI, error) {
	out := new(ABI)
	err := c.cc.Invoke(ctx, "/types.AergoRPCService/GetABI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aergoRPCServiceClient) CommitTX(ctx context.Context, in *TxList, opts ...grpc.CallOption) (*CommitResultList, error) {
	out := new(CommitResultList)
	err := c.cc.Invoke(ctx, "/types.AergoRPCService/CommitTX", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aergoRPCServiceClient) GetState(ctx context.Context, in *SingleBytes, opts ...grpc.CallOption) (*State, error) {
	out := new(State)
	err := c.cc.Invoke(ctx, "/types.AergoRPCService/GetState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aergoRPCServiceClient) CreateAccount(ctx context.Context, in *Personal, opts ...grpc.CallOption) (*Account, error) {
	out := new(Account)
	err := c.cc.Invoke(ctx, "/types.AergoRPCService/CreateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aergoRPCServiceClient) GetAccounts(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AccountList, error) {
	out := new(AccountList)
	err := c.cc.Invoke(ctx, "/types.AergoRPCService/GetAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aergoRPCServiceClient) LockAccount(ctx context.Context, in *Personal, opts ...grpc.CallOption) (*Account, error) {
	out := new(Account)
	err := c.cc.Invoke(ctx, "/types.AergoRPCService/LockAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aergoRPCServiceClient) UnlockAccount(ctx context.Context, in *Personal, opts ...grpc.CallOption) (*Account, error) {
	out := new(Account)
	err := c.cc.Invoke(ctx, "/types.AergoRPCService/UnlockAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aergoRPCServiceClient) SignTX(ctx context.Context, in *Tx, opts ...grpc.CallOption) (*Tx, error) {
	out := new(Tx)
	err := c.cc.Invoke(ctx, "/types.AergoRPCService/SignTX", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aergoRPCServiceClient) VerifyTX(ctx context.Context, in *Tx, opts ...grpc.CallOption) (*VerifyResult, error) {
	out := new(VerifyResult)
	err := c.cc.Invoke(ctx, "/types.AergoRPCService/VerifyTX", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aergoRPCServiceClient) GetPeers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PeerList, error) {
	out := new(PeerList)
	err := c.cc.Invoke(ctx, "/types.AergoRPCService/GetPeers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AergoRPCServiceServer is the server API for AergoRPCService service.
type AergoRPCServiceServer interface {
	NodeState(context.Context, *SingleBytes) (*SingleBytes, error)
	Blockchain(context.Context, *Empty) (*BlockchainStatus, error)
	ListBlockHeaders(context.Context, *ListParams) (*BlockHeaderList, error)
	GetBlock(context.Context, *SingleBytes) (*Block, error)
	GetTX(context.Context, *SingleBytes) (*Tx, error)
	GetBlockTX(context.Context, *SingleBytes) (*TxInBlock, error)
	GetReceipt(context.Context, *SingleBytes) (*Receipt, error)
	GetABI(context.Context, *SingleBytes) (*ABI, error)
	CommitTX(context.Context, *TxList) (*CommitResultList, error)
	GetState(context.Context, *SingleBytes) (*State, error)
	CreateAccount(context.Context, *Personal) (*Account, error)
	GetAccounts(context.Context, *Empty) (*AccountList, error)
	LockAccount(context.Context, *Personal) (*Account, error)
	UnlockAccount(context.Context, *Personal) (*Account, error)
	SignTX(context.Context, *Tx) (*Tx, error)
	VerifyTX(context.Context, *Tx) (*VerifyResult, error)
	GetPeers(context.Context, *Empty) (*PeerList, error)
}

func RegisterAergoRPCServiceServer(s *grpc.Server, srv AergoRPCServiceServer) {
	s.RegisterService(&_AergoRPCService_serviceDesc, srv)
}

func _AergoRPCService_NodeState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleBytes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AergoRPCServiceServer).NodeState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.AergoRPCService/NodeState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AergoRPCServiceServer).NodeState(ctx, req.(*SingleBytes))
	}
	return interceptor(ctx, in, info, handler)
}

func _AergoRPCService_Blockchain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AergoRPCServiceServer).Blockchain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.AergoRPCService/Blockchain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AergoRPCServiceServer).Blockchain(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AergoRPCService_ListBlockHeaders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AergoRPCServiceServer).ListBlockHeaders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.AergoRPCService/ListBlockHeaders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AergoRPCServiceServer).ListBlockHeaders(ctx, req.(*ListParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _AergoRPCService_GetBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleBytes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AergoRPCServiceServer).GetBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.AergoRPCService/GetBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AergoRPCServiceServer).GetBlock(ctx, req.(*SingleBytes))
	}
	return interceptor(ctx, in, info, handler)
}

func _AergoRPCService_GetTX_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleBytes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AergoRPCServiceServer).GetTX(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.AergoRPCService/GetTX",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AergoRPCServiceServer).GetTX(ctx, req.(*SingleBytes))
	}
	return interceptor(ctx, in, info, handler)
}

func _AergoRPCService_GetBlockTX_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleBytes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AergoRPCServiceServer).GetBlockTX(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.AergoRPCService/GetBlockTX",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AergoRPCServiceServer).GetBlockTX(ctx, req.(*SingleBytes))
	}
	return interceptor(ctx, in, info, handler)
}

func _AergoRPCService_GetReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleBytes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AergoRPCServiceServer).GetReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.AergoRPCService/GetReceipt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AergoRPCServiceServer).GetReceipt(ctx, req.(*SingleBytes))
	}
	return interceptor(ctx, in, info, handler)
}

func _AergoRPCService_GetABI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleBytes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AergoRPCServiceServer).GetABI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.AergoRPCService/GetABI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AergoRPCServiceServer).GetABI(ctx, req.(*SingleBytes))
	}
	return interceptor(ctx, in, info, handler)
}

func _AergoRPCService_CommitTX_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AergoRPCServiceServer).CommitTX(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.AergoRPCService/CommitTX",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AergoRPCServiceServer).CommitTX(ctx, req.(*TxList))
	}
	return interceptor(ctx, in, info, handler)
}

func _AergoRPCService_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleBytes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AergoRPCServiceServer).GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.AergoRPCService/GetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AergoRPCServiceServer).GetState(ctx, req.(*SingleBytes))
	}
	return interceptor(ctx, in, info, handler)
}

func _AergoRPCService_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Personal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AergoRPCServiceServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.AergoRPCService/CreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AergoRPCServiceServer).CreateAccount(ctx, req.(*Personal))
	}
	return interceptor(ctx, in, info, handler)
}

func _AergoRPCService_GetAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AergoRPCServiceServer).GetAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.AergoRPCService/GetAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AergoRPCServiceServer).GetAccounts(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AergoRPCService_LockAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Personal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AergoRPCServiceServer).LockAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.AergoRPCService/LockAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AergoRPCServiceServer).LockAccount(ctx, req.(*Personal))
	}
	return interceptor(ctx, in, info, handler)
}

func _AergoRPCService_UnlockAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Personal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AergoRPCServiceServer).UnlockAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.AergoRPCService/UnlockAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AergoRPCServiceServer).UnlockAccount(ctx, req.(*Personal))
	}
	return interceptor(ctx, in, info, handler)
}

func _AergoRPCService_SignTX_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AergoRPCServiceServer).SignTX(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.AergoRPCService/SignTX",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AergoRPCServiceServer).SignTX(ctx, req.(*Tx))
	}
	return interceptor(ctx, in, info, handler)
}

func _AergoRPCService_VerifyTX_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AergoRPCServiceServer).VerifyTX(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.AergoRPCService/VerifyTX",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AergoRPCServiceServer).VerifyTX(ctx, req.(*Tx))
	}
	return interceptor(ctx, in, info, handler)
}

func _AergoRPCService_GetPeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AergoRPCServiceServer).GetPeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.AergoRPCService/GetPeers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AergoRPCServiceServer).GetPeers(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _AergoRPCService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "types.AergoRPCService",
	HandlerType: (*AergoRPCServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NodeState",
			Handler:    _AergoRPCService_NodeState_Handler,
		},
		{
			MethodName: "Blockchain",
			Handler:    _AergoRPCService_Blockchain_Handler,
		},
		{
			MethodName: "ListBlockHeaders",
			Handler:    _AergoRPCService_ListBlockHeaders_Handler,
		},
		{
			MethodName: "GetBlock",
			Handler:    _AergoRPCService_GetBlock_Handler,
		},
		{
			MethodName: "GetTX",
			Handler:    _AergoRPCService_GetTX_Handler,
		},
		{
			MethodName: "GetBlockTX",
			Handler:    _AergoRPCService_GetBlockTX_Handler,
		},
		{
			MethodName: "GetReceipt",
			Handler:    _AergoRPCService_GetReceipt_Handler,
		},
		{
			MethodName: "GetABI",
			Handler:    _AergoRPCService_GetABI_Handler,
		},
		{
			MethodName: "CommitTX",
			Handler:    _AergoRPCService_CommitTX_Handler,
		},
		{
			MethodName: "GetState",
			Handler:    _AergoRPCService_GetState_Handler,
		},
		{
			MethodName: "CreateAccount",
			Handler:    _AergoRPCService_CreateAccount_Handler,
		},
		{
			MethodName: "GetAccounts",
			Handler:    _AergoRPCService_GetAccounts_Handler,
		},
		{
			MethodName: "LockAccount",
			Handler:    _AergoRPCService_LockAccount_Handler,
		},
		{
			MethodName: "UnlockAccount",
			Handler:    _AergoRPCService_UnlockAccount_Handler,
		},
		{
			MethodName: "SignTX",
			Handler:    _AergoRPCService_SignTX_Handler,
		},
		{
			MethodName: "VerifyTX",
			Handler:    _AergoRPCService_VerifyTX_Handler,
		},
		{
			MethodName: "GetPeers",
			Handler:    _AergoRPCService_GetPeers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor_rpc_25311dea4eb2eb6f) }

var fileDescriptor_rpc_25311dea4eb2eb6f = []byte{
	// 966 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0xdd, 0x6e, 0xe2, 0x46,
	0x14, 0xc6, 0x24, 0x10, 0x72, 0x80, 0xc5, 0x9d, 0xae, 0x52, 0x4a, 0xab, 0x04, 0xcd, 0x56, 0x15,
	0x4d, 0x5b, 0xd2, 0xd2, 0xae, 0x7a, 0x59, 0x19, 0x96, 0x82, 0x55, 0x7e, 0xa2, 0xb1, 0x93, 0xb2,
	0xed, 0x85, 0x65, 0xcc, 0x00, 0xd6, 0x82, 0x6d, 0x79, 0x86, 0x28, 0xe9, 0x6b, 0xf5, 0x85, 0xfa,
	0x28, 0x95, 0x67, 0x6c, 0xb0, 0x23, 0x72, 0xb1, 0xbd, 0xca, 0x9c, 0xe3, 0xef, 0xfc, 0x7f, 0xe7,
	0x10, 0x38, 0x0f, 0x03, 0xa7, 0x1d, 0x84, 0x3e, 0xf7, 0x51, 0x81, 0x3f, 0x05, 0x94, 0x35, 0xae,
	0x56, 0xbe, 0xbf, 0xda, 0xd0, 0x1b, 0xa1, 0x9c, 0xef, 0x96, 0x37, 0xdc, 0xdd, 0x52, 0xc6, 0xed,
	0x6d, 0x20, 0x71, 0x0d, 0x75, 0xbe, 0xf1, 0x9d, 0x0f, 0xce, 0xda, 0x76, 0xbd, 0x58, 0x53, 0xb5,
	0x1d, 0xc7, 0xdf, 0x79, 0x3c, 0x16, 0xc1, 0xf3, 0x17, 0x54, 0xbe, 0xf1, 0x5f, 0xa0, 0x76, 0xf7,
	0x70, 0x83, 0xdb, 0x7c, 0xc7, 0xd0, 0xd7, 0x50, 0x9b, 0x53, 0xc6, 0x2d, 0xe1, 0xc7, 0x5a, 0xdb,
	0x6c, 0x5d, 0x57, 0x9a, 0x4a, 0xab, 0x42, 0xaa, 0x91, 0x5a, 0xc0, 0x87, 0x36, 0x5b, 0xa3, 0x2b,
	0x28, 0x0b, 0xdc, 0x9a, 0xba, 0xab, 0x35, 0xaf, 0xe7, 0x9b, 0x4a, 0xeb, 0x94, 0x40, 0xa4, 0x1a,
	0x0a, 0x0d, 0x76, 0xa0, 0xa0, 0x7b, 0xc1, 0x8e, 0x23, 0x04, 0xa7, 0x29, 0x37, 0xe2, 0x8d, 0xea,
	0x70, 0x66, 0x2f, 0x16, 0x21, 0x65, 0xac, 0x9e, 0x6f, 0x9e, 0xb4, 0x2a, 0x24, 0x11, 0xd1, 0x6b,
	0x28, 0x3c, 0xd8, 0x9b, 0x1d, 0xad, 0x9f, 0x08, 0xb8, 0x14, 0xd0, 0x05, 0x14, 0x99, 0x13, 0xba,
	0x01, 0xaf, 0x9f, 0x0a, 0x75, 0x2c, 0xe1, 0x25, 0x14, 0xa7, 0x3b, 0x1e, 0x45, 0x79, 0x0d, 0x05,
	0xd7, 0x5b, 0xd0, 0x47, 0x11, 0xa6, 0x4a, 0xa4, 0x90, 0x8d, 0xa3, 0xfc, 0xff, 0x38, 0x67, 0x50,
	0xe8, 0x6f, 0x03, 0xfe, 0x84, 0xdf, 0x40, 0xd9, 0x70, 0xbd, 0xd5, 0x86, 0x76, 0x9f, 0x38, 0x4d,
	0x79, 0x51, 0x52, 0x5e, 0xb0, 0x09, 0xa5, 0x5b, 0x1a, 0x32, 0xdf, 0xb3, 0x37, 0xe8, 0x12, 0x20,
	0xb0, 0x19, 0x0b, 0xd6, 0xa1, 0xcd, 0x24, 0xec, 0x9c, 0xa4, 0x34, 0xa8, 0x05, 0x67, 0xf1, 0x80,
	0x44, 0x86, 0xe5, 0xce, 0xab, 0xb6, 0x18, 0x75, 0x5b, 0x93, 0x5a, 0x92, 0x7c, 0xc6, 0xa3, 0xc8,
	0x2b, 0x0d, 0x47, 0x2e, 0xe3, 0xa8, 0x05, 0x85, 0x80, 0xd2, 0x90, 0xd5, 0x95, 0xe6, 0x49, 0xab,
	0xdc, 0x41, 0xb1, 0x4d, 0xf4, 0x5d, 0x93, 0x05, 0x12, 0x09, 0x10, 0x15, 0x71, 0x9b, 0x53, 0xd9,
	0xe8, 0x02, 0x89, 0x25, 0xfc, 0x00, 0x10, 0x79, 0xba, 0xb5, 0x43, 0x7b, 0xcb, 0x8e, 0xce, 0xe8,
	0x02, 0x8a, 0x99, 0xe1, 0xc6, 0x52, 0x84, 0x65, 0xee, 0xdf, 0xb2, 0x71, 0x55, 0x22, 0xde, 0x11,
	0xd6, 0x5f, 0x2e, 0x19, 0x95, 0x7d, 0xab, 0x92, 0x58, 0x42, 0x2a, 0x9c, 0xd8, 0xcc, 0xa9, 0x17,
	0x9a, 0x4a, 0xab, 0x44, 0xa2, 0x27, 0xfe, 0x05, 0x6a, 0x92, 0x44, 0xd4, 0x5e, 0xc4, 0xc5, 0x7c,
	0x05, 0x45, 0xc1, 0xb6, 0xa4, 0x9a, 0x4a, 0x5c, 0x8d, 0xc0, 0x91, 0xf8, 0x1b, 0x1e, 0x43, 0xa5,
	0xe7, 0x6f, 0xb7, 0x2e, 0x27, 0x94, 0xed, 0x36, 0xc7, 0x69, 0xf5, 0x0d, 0x14, 0x68, 0x18, 0xfa,
	0xa1, 0xc8, 0xf8, 0x55, 0xe7, 0xd3, 0xd8, 0x91, 0xb4, 0x93, 0x04, 0x27, 0x12, 0x81, 0x35, 0x50,
	0xd3, 0xee, 0x44, 0x22, 0xdf, 0xc3, 0x59, 0x28, 0xa4, 0x24, 0x93, 0xac, 0x03, 0x89, 0x24, 0x09,
	0x06, 0x9b, 0x50, 0xb9, 0xa7, 0xa1, 0xbb, 0x7c, 0x8a, 0x33, 0xfa, 0x1c, 0xf2, 0x5c, 0xf2, 0xaf,
	0xdc, 0x39, 0x8f, 0x2d, 0xcd, 0x47, 0x92, 0xe7, 0x8f, 0x2f, 0x25, 0x26, 0xcd, 0x33, 0x89, 0x5d,
	0xff, 0xa3, 0x24, 0x85, 0xc6, 0x1b, 0xf9, 0x1a, 0xd4, 0xde, 0x74, 0x3c, 0xd6, 0x4d, 0xcb, 0x30,
	0x35, 0xf3, 0xce, 0xb0, 0xa6, 0xbf, 0xab, 0x39, 0x74, 0x05, 0x5f, 0x64, 0xb5, 0x93, 0xe9, 0xa4,
	0xd7, 0xb7, 0xcc, 0xe9, 0xd4, 0x1a, 0x4d, 0xff, 0x50, 0x15, 0x84, 0xe1, 0x32, 0x0b, 0xd0, 0x27,
	0xf7, 0xda, 0x48, 0x7f, 0x67, 0x69, 0x64, 0x70, 0x37, 0xee, 0x4f, 0x4c, 0x35, 0x8f, 0xde, 0xc0,
	0x55, 0x16, 0x63, 0xce, 0x2c, 0x6d, 0x44, 0xfa, 0xda, 0xbb, 0xf7, 0x56, 0x7f, 0xa6, 0x1b, 0xa6,
	0xa1, 0x9e, 0x1c, 0x05, 0xe9, 0x13, 0xb3, 0x4f, 0x26, 0xda, 0xc8, 0xea, 0x13, 0x32, 0x25, 0xea,
	0xe9, 0xf5, 0x32, 0xe9, 0xc5, 0x21, 0xe9, 0xfb, 0x3e, 0xd1, 0x7f, 0x7b, 0x9f, 0x49, 0xba, 0x09,
	0x5f, 0x66, 0xb5, 0x86, 0x3e, 0x98, 0x58, 0x93, 0xa9, 0x69, 0x8d, 0x35, 0xb3, 0x37, 0x54, 0x15,
	0x74, 0x09, 0x8d, 0x2c, 0x22, 0xc9, 0x7a, 0xa8, 0x19, 0x43, 0x35, 0xdf, 0xf9, 0xb7, 0x08, 0x35,
	0x8d, 0x86, 0x2b, 0x9f, 0xdc, 0xf6, 0x0c, 0x1a, 0x3e, 0xb8, 0x0e, 0x45, 0x6f, 0xe1, 0x7c, 0xe2,
	0x2f, 0x68, 0x14, 0x99, 0xa2, 0x64, 0x15, 0x52, 0x5b, 0xda, 0x38, 0xa2, 0xc3, 0x39, 0xf4, 0x16,
	0xe0, 0x70, 0xfd, 0x50, 0x42, 0x3a, 0xb1, 0xe6, 0x8d, 0xcf, 0xd2, 0x14, 0x4c, 0x9d, 0x47, 0x9c,
	0x43, 0xbf, 0x82, 0x1a, 0x91, 0x25, 0x45, 0x62, 0x86, 0x3e, 0x89, 0xe1, 0x87, 0x8d, 0x6a, 0x5c,
	0xa4, 0x3d, 0x1c, 0xc8, 0x8e, 0x73, 0xa8, 0x0d, 0xa5, 0x01, 0x95, 0xf6, 0x47, 0xb3, 0xcd, 0xd0,
	0x1f, 0xe7, 0xa2, 0x5d, 0x1f, 0x50, 0x6e, 0xce, 0x8e, 0x82, 0x0f, 0x3c, 0xc3, 0x39, 0xf4, 0x33,
	0x40, 0xe2, 0xf9, 0x05, 0xb8, 0xba, 0x87, 0xeb, 0x5e, 0xe2, 0xbf, 0x23, 0xac, 0x08, 0x75, 0xa8,
	0x1b, 0xf0, 0xa3, 0x56, 0xc9, 0x49, 0x8a, 0x31, 0x38, 0x87, 0xae, 0xa1, 0x38, 0xa0, 0x5c, 0xeb,
	0xea, 0x47, 0xf1, 0x90, 0x9c, 0xb0, 0xae, 0x2e, 0xb2, 0x2a, 0x49, 0x3e, 0x9b, 0x33, 0x54, 0xdd,
	0xc7, 0x8f, 0x9a, 0xb1, 0x6f, 0xf3, 0xf3, 0x4d, 0xdc, 0x77, 0xe9, 0xe5, 0x99, 0x26, 0x5d, 0x12,
	0x08, 0x51, 0x45, 0xb5, 0x17, 0x52, 0x9b, 0xd3, 0xf8, 0x6e, 0xa2, 0xda, 0xfe, 0x26, 0xca, 0x4b,
	0xdc, 0x78, 0x76, 0x58, 0x71, 0x0e, 0xfd, 0x08, 0xe5, 0xa8, 0x0a, 0x29, 0xb3, 0x67, 0x14, 0x40,
	0x59, 0x78, 0x9c, 0xd6, 0x0f, 0x50, 0x1e, 0xf9, 0xce, 0x87, 0x8f, 0x08, 0xd2, 0x81, 0xea, 0x9d,
	0xb7, 0xf9, 0x38, 0x9b, 0x26, 0x14, 0x0d, 0x77, 0xe5, 0x99, 0x33, 0x74, 0x98, 0x6f, 0x76, 0xd4,
	0xdf, 0x41, 0x49, 0xee, 0x5b, 0x16, 0x93, 0x3d, 0x2c, 0xb2, 0xa1, 0x38, 0x87, 0xbe, 0x15, 0xcd,
	0xbc, 0x15, 0x3f, 0x08, 0xd9, 0x2a, 0x6b, 0xa9, 0x5f, 0x0e, 0x59, 0x62, 0xb7, 0xf9, 0xe7, 0xe5,
	0xca, 0xe5, 0xeb, 0xdd, 0xbc, 0xed, 0xf8, 0xdb, 0x1b, 0x3b, 0x5a, 0x36, 0xd7, 0x97, 0x7f, 0x6f,
	0x04, 0x78, 0x5e, 0x14, 0xff, 0x3e, 0xfc, 0xf4, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x99, 0xf9,
	0x6a, 0x53, 0xa0, 0x08, 0x00, 0x00,
}
